##  primes.min: compute primes using Sieve of Eratosthenes
##  (http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)
##
##  Compute primes up to a specified n by crossing out multiples of successively
##  larger primes in a boolean array.  The array stores a[k] = 1 if k is composite
##  (not prime), and a[k] = 0 if k is not divisible by the divisors considered
##  thus far.
##
##  Requires a specified integer n as input, assumed to be < 1000.

program arrays;

n : integer;
a : array[10] of integer;	## prime candidates array
i, x, y, z : integer;

beginprogram	## main program
    ## compute the square root of n and put the result in sqrt_n

    ## initialization of the array
    i := 0;
    x := 5;
    y := 6;
    z := 7;
    n := 10;
    while i < n beginloop
      a[i] := 0;
      i := i + 1;
    endloop;

    ##read a[3];
    ##write a[3];
    ## make the array
    i := 0;
    while i <= 9 beginloop
      
       read a[i];
       write a[i];

       i := i + 1;
    endloop;

    a[5] := 0;
    write a[5];
    while a[5] < 10 beginloop
    
    	write a[5];
        a[5] := a[5] + 1;
    endloop;

 ##write x, y, z;
endprogram
