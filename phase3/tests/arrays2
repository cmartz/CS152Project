##  primes.min: compute primes using Sieve of Eratosthenes
##  (http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)
##
##  Compute primes up to a specified n by crossing out multiples of successively
##  larger primes in a boolean array.  The array stores a[k] = 1 if k is composite
##  (not prime), and a[k] = 0 if k is not divisible by the divisors considered
##  thus far.
##
##  Requires a specified integer n as input, assumed to be < 1000.

program arrays;

n : integer;
a : array[10] of integer;	## prime candidates array
i, x : integer;

beginprogram	## main program
    ## compute the square root of n and put the result in sqrt_n

    ## initialization of the array
    i := 0;
    x := 5;
    n := 10;
    while i < n beginloop
      a[i] := 0;
      i := i + 1;
    endloop;

    ## make the array
    i := 0;
    while i <= 9 beginloop
      
       ##if ( a[0] == 0 or a[0] == 1 ) and a[i] == 0 then
       if (x == 5 and i == 0) and a[i] == 0 then 
	 write x;
       endif;

       i := i + 1;
    endloop;

 
endprogram
