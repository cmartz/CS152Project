Useless nonterminals

   Not_prime
   Neg_prime


Terminals which are not used

   DO


Useless rules

   71 Not_prime: NOT
   72          | /* empty */

   73 Neg_prime: SUB
   74          | /* empty */


State 99 conflicts: 1 reduce/reduce


Grammar

    0 $accept: Program $end

    1 @1: /* empty */

    2 Program: PROGRAM IDENT SEMICOLON @1 Block END_PROGRAM

    3 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    4 Dec_prime: Dec SEMICOLON Dec_prime
    5          | /* empty */

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    7    | IDENT Ident_seq COLON INTEGER

    8 @2: /* empty */

    9 Ident_seq: COMMA IDENT @2 Ident_seq
   10          | /* empty */

   11 Stmt: Var ASSIGN Expr
   12     | Var ASSIGN Var
   13     | Var ASSIGN Bool_exp QUESTION Expr COLON Expr
   14     | IF Bool_exp THEN Stmt SEMICOLON Stmt_prime Cond_tail
   15     | WHILE Bool_exp BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP
   16     | BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp
   17     | READ Var Var_prime
   18     | WRITE Var Var_prime
   19     | BREAK
   20     | CONTINUE
   21     | EXIT

   22 Stmt_prime: Stmt SEMICOLON Stmt_prime
   23           | /* empty */

   24 Bool_exp: Relation_and_exp Or_seq

   25 Or_seq: OR Relation_and_exp Or_seq
   26       | /* empty */

   27 Relation_and_exp: Relation_exp And_seq

   28 And_seq: AND Relation_exp And_seq
   29        | /* empty */

   30 Relation_exp: NOT Expr Comp Expr
   31             | NOT FALSE
   32             | NOT TRUE
   33             | NOT L_PAREN Bool_exp R_PAREN
   34             | Expr Comp Expr
   35             | FALSE
   36             | TRUE
   37             | L_PAREN Bool_exp R_PAREN

   38 Var: IDENT
   39    | IDENT L_BRACKET Expr R_BRACKET
   40    | SUB IDENT

   41 Var_prime: COMMA Var Var_prime
   42          | /* empty */

   43 Cond_tail: Else_if_seq
   44          | ENDIF
   45          | ELSE Stmt SEMICOLON Stmt_prime ENDIF
   46          | ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ENDIF
   47          | ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF

   48 Else_if_seq: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq
   49            | /* empty */

   50 Comp: EQ
   51     | NEQ
   52     | LT
   53     | GT
   54     | LTE
   55     | GTE

   56 Expr: Term ADD Expr
   57     | Term SUB Expr
   58     | Term MULT Expr
   59     | Term DIV Expr
   60     | Term
   61     | Var ADD Expr
   62     | Var SUB Expr
   63     | Var MULT Expr
   64     | Var DIV Expr
   65     | Var MOD Expr
   66     | Var

   67 Term: NUMBER
   68     | L_PAREN Expr R_PAREN
   69     | SUB NUMBER
   70     | SUB L_PAREN Expr R_PAREN


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 2
BEGIN_PROGRAM (259) 3
END_PROGRAM (260) 2
INTEGER (261) 6 7
ARRAY (262) 6
OF (263) 6
IF (264) 14
THEN (265) 14
ENDIF (266) 44 45 46 47
ELSE (267) 45 47
ELSEIF (268) 46 47 48
WHILE (269) 15 16
DO (270)
BEGINLOOP (271) 15 16
ENDLOOP (272) 15 16
BREAK (273) 19
CONTINUE (274) 20
EXIT (275) 21
READ (276) 17
WRITE (277) 18
AND (278) 28
OR (279) 25
NOT (280) 30 31 32 33
TRUE (281) 32 36
FALSE (282) 31 35
ADD (283) 56 61
SUB (284) 40 57 62 69 70
MULT (285) 58 63
DIV (286) 59 64
MOD (287) 65
EQ (288) 50
NEQ (289) 51
LT (290) 52
GT (291) 53
LTE (292) 54
GTE (293) 55
NUMBER (294) 6 67 69
IDENT (295) 2 6 7 9 38 39 40
SEMICOLON (296) 2 3 4 14 15 16 22 45 46 47 48
COLON (297) 6 7 13
COMMA (298) 9 41
QUESTION (299) 13
L_BRACKET (300) 6 39
R_BRACKET (301) 6 39
L_PAREN (302) 33 37 68 70
R_PAREN (303) 33 37 68 70
ASSIGN (304) 11 12 13


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
Program (51)
    on left: 2, on right: 0
@1 (52)
    on left: 1, on right: 2
Block (53)
    on left: 3, on right: 2
Dec_prime (54)
    on left: 4 5, on right: 3 4
Dec (55)
    on left: 6 7, on right: 3 4
Ident_seq (56)
    on left: 9 10, on right: 6 7 9
@2 (57)
    on left: 8, on right: 9
Stmt (58)
    on left: 11 12 13 14 15 16 17 18 19 20 21, on right: 3 14 15 16
    22 45 46 47 48
Stmt_prime (59)
    on left: 22 23, on right: 3 14 15 16 22 45 46 47 48
Bool_exp (60)
    on left: 24, on right: 13 14 15 16 33 37
Or_seq (61)
    on left: 25 26, on right: 24 25
Relation_and_exp (62)
    on left: 27, on right: 24 25
And_seq (63)
    on left: 28 29, on right: 27 28
Relation_exp (64)
    on left: 30 31 32 33 34 35 36 37, on right: 27 28
Var (65)
    on left: 38 39 40, on right: 11 12 13 17 18 41 61 62 63 64 65 66
Var_prime (66)
    on left: 41 42, on right: 17 18 41
Cond_tail (67)
    on left: 43 44 45 46 47, on right: 14
Else_if_seq (68)
    on left: 48 49, on right: 43 46 47 48
Comp (69)
    on left: 50 51 52 53 54 55, on right: 30 34
Expr (70)
    on left: 56 57 58 59 60 61 62 63 64 65 66, on right: 11 13 30 34
    39 56 57 58 59 61 62 63 64 65 68 70
Term (71)
    on left: 67 68 69 70, on right: 56 57 58 59 60


state 0

    0 $accept: . Program $end

    PROGRAM  shift, and go to state 1

    Program  go to state 2


state 1

    2 Program: PROGRAM . IDENT SEMICOLON @1 Block END_PROGRAM

    IDENT  shift, and go to state 3


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 4


state 3

    2 Program: PROGRAM IDENT . SEMICOLON @1 Block END_PROGRAM

    SEMICOLON  shift, and go to state 5


state 4

    0 $accept: Program $end .

    $default  accept


state 5

    2 Program: PROGRAM IDENT SEMICOLON . @1 Block END_PROGRAM

    $default  reduce using rule 1 (@1)

    @1  go to state 6


state 6

    2 Program: PROGRAM IDENT SEMICOLON @1 . Block END_PROGRAM

    IDENT  shift, and go to state 7

    Block  go to state 8
    Dec    go to state 9


state 7

    6 Dec: IDENT . Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    7    | IDENT . Ident_seq COLON INTEGER

    COMMA  shift, and go to state 10

    $default  reduce using rule 10 (Ident_seq)

    Ident_seq  go to state 11


state 8

    2 Program: PROGRAM IDENT SEMICOLON @1 Block . END_PROGRAM

    END_PROGRAM  shift, and go to state 12


state 9

    3 Block: Dec . SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 13


state 10

    9 Ident_seq: COMMA . IDENT @2 Ident_seq

    IDENT  shift, and go to state 14


state 11

    6 Dec: IDENT Ident_seq . COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    7    | IDENT Ident_seq . COLON INTEGER

    COLON  shift, and go to state 15


state 12

    2 Program: PROGRAM IDENT SEMICOLON @1 Block END_PROGRAM .

    $default  reduce using rule 2 (Program)


state 13

    3 Block: Dec SEMICOLON . Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    IDENT  shift, and go to state 7

    $default  reduce using rule 5 (Dec_prime)

    Dec_prime  go to state 16
    Dec        go to state 17


state 14

    9 Ident_seq: COMMA IDENT . @2 Ident_seq

    $default  reduce using rule 8 (@2)

    @2  go to state 18


state 15

    6 Dec: IDENT Ident_seq COLON . ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    7    | IDENT Ident_seq COLON . INTEGER

    INTEGER  shift, and go to state 19
    ARRAY    shift, and go to state 20


state 16

    3 Block: Dec SEMICOLON Dec_prime . BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    BEGIN_PROGRAM  shift, and go to state 21


state 17

    4 Dec_prime: Dec . SEMICOLON Dec_prime

    SEMICOLON  shift, and go to state 22


state 18

    9 Ident_seq: COMMA IDENT @2 . Ident_seq

    COMMA  shift, and go to state 10

    $default  reduce using rule 10 (Ident_seq)

    Ident_seq  go to state 23


state 19

    7 Dec: IDENT Ident_seq COLON INTEGER .

    $default  reduce using rule 7 (Dec)


state 20

    6 Dec: IDENT Ident_seq COLON ARRAY . L_BRACKET NUMBER R_BRACKET OF INTEGER

    L_BRACKET  shift, and go to state 24


state 21

    3 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM . Stmt SEMICOLON Stmt_prime

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    Stmt  go to state 35
    Var   go to state 36


state 22

    4 Dec_prime: Dec SEMICOLON . Dec_prime

    IDENT  shift, and go to state 7

    $default  reduce using rule 5 (Dec_prime)

    Dec_prime  go to state 37
    Dec        go to state 17


state 23

    9 Ident_seq: COMMA IDENT @2 Ident_seq .

    $default  reduce using rule 9 (Ident_seq)


state 24

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET . NUMBER R_BRACKET OF INTEGER

    NUMBER  shift, and go to state 38


state 25

   14 Stmt: IF . Bool_exp THEN Stmt SEMICOLON Stmt_prime Cond_tail

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 44

    Bool_exp          go to state 45
    Relation_and_exp  go to state 46
    Relation_exp      go to state 47
    Var               go to state 48
    Expr              go to state 49
    Term              go to state 50


state 26

   15 Stmt: WHILE . Bool_exp BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 44

    Bool_exp          go to state 51
    Relation_and_exp  go to state 46
    Relation_exp      go to state 47
    Var               go to state 48
    Expr              go to state 49
    Term              go to state 50


state 27

   16 Stmt: BEGINLOOP . Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    Stmt  go to state 52
    Var   go to state 36


state 28

   19 Stmt: BREAK .

    $default  reduce using rule 19 (Stmt)


state 29

   20 Stmt: CONTINUE .

    $default  reduce using rule 20 (Stmt)


state 30

   21 Stmt: EXIT .

    $default  reduce using rule 21 (Stmt)


state 31

   17 Stmt: READ . Var Var_prime

    SUB    shift, and go to state 33
    IDENT  shift, and go to state 34

    Var  go to state 53


state 32

   18 Stmt: WRITE . Var Var_prime

    SUB    shift, and go to state 33
    IDENT  shift, and go to state 34

    Var  go to state 54


state 33

   40 Var: SUB . IDENT

    IDENT  shift, and go to state 55


state 34

   38 Var: IDENT .
   39    | IDENT . L_BRACKET Expr R_BRACKET

    L_BRACKET  shift, and go to state 56

    $default  reduce using rule 38 (Var)


state 35

    3 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt . SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 57


state 36

   11 Stmt: Var . ASSIGN Expr
   12     | Var . ASSIGN Var
   13     | Var . ASSIGN Bool_exp QUESTION Expr COLON Expr

    ASSIGN  shift, and go to state 58


state 37

    4 Dec_prime: Dec SEMICOLON Dec_prime .

    $default  reduce using rule 4 (Dec_prime)


state 38

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER . R_BRACKET OF INTEGER

    R_BRACKET  shift, and go to state 59


state 39

   30 Relation_exp: NOT . Expr Comp Expr
   31             | NOT . FALSE
   32             | NOT . TRUE
   33             | NOT . L_PAREN Bool_exp R_PAREN

    TRUE     shift, and go to state 60
    FALSE    shift, and go to state 61
    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 62

    Var   go to state 48
    Expr  go to state 63
    Term  go to state 50


state 40

   36 Relation_exp: TRUE .

    $default  reduce using rule 36 (Relation_exp)


state 41

   35 Relation_exp: FALSE .

    $default  reduce using rule 35 (Relation_exp)


state 42

   40 Var: SUB . IDENT
   69 Term: SUB . NUMBER
   70     | SUB . L_PAREN Expr R_PAREN

    NUMBER   shift, and go to state 64
    IDENT    shift, and go to state 55
    L_PAREN  shift, and go to state 65


state 43

   67 Term: NUMBER .

    $default  reduce using rule 67 (Term)


state 44

   37 Relation_exp: L_PAREN . Bool_exp R_PAREN
   68 Term: L_PAREN . Expr R_PAREN

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 44

    Bool_exp          go to state 66
    Relation_and_exp  go to state 46
    Relation_exp      go to state 47
    Var               go to state 48
    Expr              go to state 67
    Term              go to state 50


state 45

   14 Stmt: IF Bool_exp . THEN Stmt SEMICOLON Stmt_prime Cond_tail

    THEN  shift, and go to state 68


state 46

   24 Bool_exp: Relation_and_exp . Or_seq

    OR  shift, and go to state 69

    $default  reduce using rule 26 (Or_seq)

    Or_seq  go to state 70


state 47

   27 Relation_and_exp: Relation_exp . And_seq

    AND  shift, and go to state 71

    $default  reduce using rule 29 (And_seq)

    And_seq  go to state 72


state 48

   61 Expr: Var . ADD Expr
   62     | Var . SUB Expr
   63     | Var . MULT Expr
   64     | Var . DIV Expr
   65     | Var . MOD Expr
   66     | Var .

    ADD   shift, and go to state 73
    SUB   shift, and go to state 74
    MULT  shift, and go to state 75
    DIV   shift, and go to state 76
    MOD   shift, and go to state 77

    $default  reduce using rule 66 (Expr)


state 49

   34 Relation_exp: Expr . Comp Expr

    EQ   shift, and go to state 78
    NEQ  shift, and go to state 79
    LT   shift, and go to state 80
    GT   shift, and go to state 81
    LTE  shift, and go to state 82
    GTE  shift, and go to state 83

    Comp  go to state 84


state 50

   56 Expr: Term . ADD Expr
   57     | Term . SUB Expr
   58     | Term . MULT Expr
   59     | Term . DIV Expr
   60     | Term .

    ADD   shift, and go to state 85
    SUB   shift, and go to state 86
    MULT  shift, and go to state 87
    DIV   shift, and go to state 88

    $default  reduce using rule 60 (Expr)


state 51

   15 Stmt: WHILE Bool_exp . BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP

    BEGINLOOP  shift, and go to state 89


state 52

   16 Stmt: BEGINLOOP Stmt . SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp

    SEMICOLON  shift, and go to state 90


state 53

   17 Stmt: READ Var . Var_prime

    COMMA  shift, and go to state 91

    $default  reduce using rule 42 (Var_prime)

    Var_prime  go to state 92


state 54

   18 Stmt: WRITE Var . Var_prime

    COMMA  shift, and go to state 91

    $default  reduce using rule 42 (Var_prime)

    Var_prime  go to state 93


state 55

   40 Var: SUB IDENT .

    $default  reduce using rule 40 (Var)


state 56

   39 Var: IDENT L_BRACKET . Expr R_BRACKET

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 95
    Term  go to state 50


state 57

    3 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON . Stmt_prime

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    $default  reduce using rule 23 (Stmt_prime)

    Stmt        go to state 96
    Stmt_prime  go to state 97
    Var         go to state 36


state 58

   11 Stmt: Var ASSIGN . Expr
   12     | Var ASSIGN . Var
   13     | Var ASSIGN . Bool_exp QUESTION Expr COLON Expr

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 44

    Bool_exp          go to state 98
    Relation_and_exp  go to state 46
    Relation_exp      go to state 47
    Var               go to state 99
    Expr              go to state 100
    Term              go to state 50


state 59

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET . OF INTEGER

    OF  shift, and go to state 101


state 60

   32 Relation_exp: NOT TRUE .

    $default  reduce using rule 32 (Relation_exp)


state 61

   31 Relation_exp: NOT FALSE .

    $default  reduce using rule 31 (Relation_exp)


state 62

   33 Relation_exp: NOT L_PAREN . Bool_exp R_PAREN
   68 Term: L_PAREN . Expr R_PAREN

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 44

    Bool_exp          go to state 102
    Relation_and_exp  go to state 46
    Relation_exp      go to state 47
    Var               go to state 48
    Expr              go to state 67
    Term              go to state 50


state 63

   30 Relation_exp: NOT Expr . Comp Expr

    EQ   shift, and go to state 78
    NEQ  shift, and go to state 79
    LT   shift, and go to state 80
    GT   shift, and go to state 81
    LTE  shift, and go to state 82
    GTE  shift, and go to state 83

    Comp  go to state 103


state 64

   69 Term: SUB NUMBER .

    $default  reduce using rule 69 (Term)


state 65

   70 Term: SUB L_PAREN . Expr R_PAREN

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 104
    Term  go to state 50


state 66

   37 Relation_exp: L_PAREN Bool_exp . R_PAREN

    R_PAREN  shift, and go to state 105


state 67

   34 Relation_exp: Expr . Comp Expr
   68 Term: L_PAREN Expr . R_PAREN

    EQ       shift, and go to state 78
    NEQ      shift, and go to state 79
    LT       shift, and go to state 80
    GT       shift, and go to state 81
    LTE      shift, and go to state 82
    GTE      shift, and go to state 83
    R_PAREN  shift, and go to state 106

    Comp  go to state 84


state 68

   14 Stmt: IF Bool_exp THEN . Stmt SEMICOLON Stmt_prime Cond_tail

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    Stmt  go to state 107
    Var   go to state 36


state 69

   25 Or_seq: OR . Relation_and_exp Or_seq

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 44

    Relation_and_exp  go to state 108
    Relation_exp      go to state 47
    Var               go to state 48
    Expr              go to state 49
    Term              go to state 50


state 70

   24 Bool_exp: Relation_and_exp Or_seq .

    $default  reduce using rule 24 (Bool_exp)


state 71

   28 And_seq: AND . Relation_exp And_seq

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 44

    Relation_exp  go to state 109
    Var           go to state 48
    Expr          go to state 49
    Term          go to state 50


state 72

   27 Relation_and_exp: Relation_exp And_seq .

    $default  reduce using rule 27 (Relation_and_exp)


state 73

   61 Expr: Var ADD . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 110
    Term  go to state 50


state 74

   62 Expr: Var SUB . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 111
    Term  go to state 50


state 75

   63 Expr: Var MULT . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 112
    Term  go to state 50


state 76

   64 Expr: Var DIV . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 113
    Term  go to state 50


state 77

   65 Expr: Var MOD . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 114
    Term  go to state 50


state 78

   50 Comp: EQ .

    $default  reduce using rule 50 (Comp)


state 79

   51 Comp: NEQ .

    $default  reduce using rule 51 (Comp)


state 80

   52 Comp: LT .

    $default  reduce using rule 52 (Comp)


state 81

   53 Comp: GT .

    $default  reduce using rule 53 (Comp)


state 82

   54 Comp: LTE .

    $default  reduce using rule 54 (Comp)


state 83

   55 Comp: GTE .

    $default  reduce using rule 55 (Comp)


state 84

   34 Relation_exp: Expr Comp . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 115
    Term  go to state 50


state 85

   56 Expr: Term ADD . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 116
    Term  go to state 50


state 86

   57 Expr: Term SUB . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 117
    Term  go to state 50


state 87

   58 Expr: Term MULT . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 118
    Term  go to state 50


state 88

   59 Expr: Term DIV . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 119
    Term  go to state 50


state 89

   15 Stmt: WHILE Bool_exp BEGINLOOP . Stmt SEMICOLON Stmt_prime ENDLOOP

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    Stmt  go to state 120
    Var   go to state 36


state 90

   16 Stmt: BEGINLOOP Stmt SEMICOLON . Stmt_prime ENDLOOP WHILE Bool_exp

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    $default  reduce using rule 23 (Stmt_prime)

    Stmt        go to state 96
    Stmt_prime  go to state 121
    Var         go to state 36


state 91

   41 Var_prime: COMMA . Var Var_prime

    SUB    shift, and go to state 33
    IDENT  shift, and go to state 34

    Var  go to state 122


state 92

   17 Stmt: READ Var Var_prime .

    $default  reduce using rule 17 (Stmt)


state 93

   18 Stmt: WRITE Var Var_prime .

    $default  reduce using rule 18 (Stmt)


state 94

   68 Term: L_PAREN . Expr R_PAREN

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 123
    Term  go to state 50


state 95

   39 Var: IDENT L_BRACKET Expr . R_BRACKET

    R_BRACKET  shift, and go to state 124


state 96

   22 Stmt_prime: Stmt . SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 125


state 97

    3 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime .

    $default  reduce using rule 3 (Block)


state 98

   13 Stmt: Var ASSIGN Bool_exp . QUESTION Expr COLON Expr

    QUESTION  shift, and go to state 126


state 99

   12 Stmt: Var ASSIGN Var .
   61 Expr: Var . ADD Expr
   62     | Var . SUB Expr
   63     | Var . MULT Expr
   64     | Var . DIV Expr
   65     | Var . MOD Expr
   66     | Var .

    ADD   shift, and go to state 73
    SUB   shift, and go to state 74
    MULT  shift, and go to state 75
    DIV   shift, and go to state 76
    MOD   shift, and go to state 77

    SEMICOLON  reduce using rule 12 (Stmt)
    SEMICOLON  [reduce using rule 66 (Expr)]
    $default   reduce using rule 66 (Expr)


state 100

   11 Stmt: Var ASSIGN Expr .
   34 Relation_exp: Expr . Comp Expr

    EQ   shift, and go to state 78
    NEQ  shift, and go to state 79
    LT   shift, and go to state 80
    GT   shift, and go to state 81
    LTE  shift, and go to state 82
    GTE  shift, and go to state 83

    $default  reduce using rule 11 (Stmt)

    Comp  go to state 84


state 101

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 127


state 102

   33 Relation_exp: NOT L_PAREN Bool_exp . R_PAREN

    R_PAREN  shift, and go to state 128


state 103

   30 Relation_exp: NOT Expr Comp . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 129
    Term  go to state 50


state 104

   70 Term: SUB L_PAREN Expr . R_PAREN

    R_PAREN  shift, and go to state 130


state 105

   37 Relation_exp: L_PAREN Bool_exp R_PAREN .

    $default  reduce using rule 37 (Relation_exp)


state 106

   68 Term: L_PAREN Expr R_PAREN .

    $default  reduce using rule 68 (Term)


state 107

   14 Stmt: IF Bool_exp THEN Stmt . SEMICOLON Stmt_prime Cond_tail

    SEMICOLON  shift, and go to state 131


state 108

   25 Or_seq: OR Relation_and_exp . Or_seq

    OR  shift, and go to state 69

    $default  reduce using rule 26 (Or_seq)

    Or_seq  go to state 132


state 109

   28 And_seq: AND Relation_exp . And_seq

    AND  shift, and go to state 71

    $default  reduce using rule 29 (And_seq)

    And_seq  go to state 133


state 110

   61 Expr: Var ADD Expr .

    $default  reduce using rule 61 (Expr)


state 111

   62 Expr: Var SUB Expr .

    $default  reduce using rule 62 (Expr)


state 112

   63 Expr: Var MULT Expr .

    $default  reduce using rule 63 (Expr)


state 113

   64 Expr: Var DIV Expr .

    $default  reduce using rule 64 (Expr)


state 114

   65 Expr: Var MOD Expr .

    $default  reduce using rule 65 (Expr)


state 115

   34 Relation_exp: Expr Comp Expr .

    $default  reduce using rule 34 (Relation_exp)


state 116

   56 Expr: Term ADD Expr .

    $default  reduce using rule 56 (Expr)


state 117

   57 Expr: Term SUB Expr .

    $default  reduce using rule 57 (Expr)


state 118

   58 Expr: Term MULT Expr .

    $default  reduce using rule 58 (Expr)


state 119

   59 Expr: Term DIV Expr .

    $default  reduce using rule 59 (Expr)


state 120

   15 Stmt: WHILE Bool_exp BEGINLOOP Stmt . SEMICOLON Stmt_prime ENDLOOP

    SEMICOLON  shift, and go to state 134


state 121

   16 Stmt: BEGINLOOP Stmt SEMICOLON Stmt_prime . ENDLOOP WHILE Bool_exp

    ENDLOOP  shift, and go to state 135


state 122

   41 Var_prime: COMMA Var . Var_prime

    COMMA  shift, and go to state 91

    $default  reduce using rule 42 (Var_prime)

    Var_prime  go to state 136


state 123

   68 Term: L_PAREN Expr . R_PAREN

    R_PAREN  shift, and go to state 106


state 124

   39 Var: IDENT L_BRACKET Expr R_BRACKET .

    $default  reduce using rule 39 (Var)


state 125

   22 Stmt_prime: Stmt SEMICOLON . Stmt_prime

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    $default  reduce using rule 23 (Stmt_prime)

    Stmt        go to state 96
    Stmt_prime  go to state 137
    Var         go to state 36


state 126

   13 Stmt: Var ASSIGN Bool_exp QUESTION . Expr COLON Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 138
    Term  go to state 50


state 127

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER .

    $default  reduce using rule 6 (Dec)


state 128

   33 Relation_exp: NOT L_PAREN Bool_exp R_PAREN .

    $default  reduce using rule 33 (Relation_exp)


state 129

   30 Relation_exp: NOT Expr Comp Expr .

    $default  reduce using rule 30 (Relation_exp)


state 130

   70 Term: SUB L_PAREN Expr R_PAREN .

    $default  reduce using rule 70 (Term)


state 131

   14 Stmt: IF Bool_exp THEN Stmt SEMICOLON . Stmt_prime Cond_tail

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    $default  reduce using rule 23 (Stmt_prime)

    Stmt        go to state 96
    Stmt_prime  go to state 139
    Var         go to state 36


state 132

   25 Or_seq: OR Relation_and_exp Or_seq .

    $default  reduce using rule 25 (Or_seq)


state 133

   28 And_seq: AND Relation_exp And_seq .

    $default  reduce using rule 28 (And_seq)


state 134

   15 Stmt: WHILE Bool_exp BEGINLOOP Stmt SEMICOLON . Stmt_prime ENDLOOP

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    $default  reduce using rule 23 (Stmt_prime)

    Stmt        go to state 96
    Stmt_prime  go to state 140
    Var         go to state 36


state 135

   16 Stmt: BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP . WHILE Bool_exp

    WHILE  shift, and go to state 141


state 136

   41 Var_prime: COMMA Var Var_prime .

    $default  reduce using rule 41 (Var_prime)


state 137

   22 Stmt_prime: Stmt SEMICOLON Stmt_prime .

    $default  reduce using rule 22 (Stmt_prime)


state 138

   13 Stmt: Var ASSIGN Bool_exp QUESTION Expr . COLON Expr

    COLON  shift, and go to state 142


state 139

   14 Stmt: IF Bool_exp THEN Stmt SEMICOLON Stmt_prime . Cond_tail

    ENDIF   shift, and go to state 143
    ELSE    shift, and go to state 144
    ELSEIF  shift, and go to state 145

    $default  reduce using rule 49 (Else_if_seq)

    Cond_tail    go to state 146
    Else_if_seq  go to state 147


state 140

   15 Stmt: WHILE Bool_exp BEGINLOOP Stmt SEMICOLON Stmt_prime . ENDLOOP

    ENDLOOP  shift, and go to state 148


state 141

   16 Stmt: BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP WHILE . Bool_exp

    NOT      shift, and go to state 39
    TRUE     shift, and go to state 40
    FALSE    shift, and go to state 41
    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 44

    Bool_exp          go to state 149
    Relation_and_exp  go to state 46
    Relation_exp      go to state 47
    Var               go to state 48
    Expr              go to state 49
    Term              go to state 50


state 142

   13 Stmt: Var ASSIGN Bool_exp QUESTION Expr COLON . Expr

    SUB      shift, and go to state 42
    NUMBER   shift, and go to state 43
    IDENT    shift, and go to state 34
    L_PAREN  shift, and go to state 94

    Var   go to state 48
    Expr  go to state 150
    Term  go to state 50


state 143

   44 Cond_tail: ENDIF .

    $default  reduce using rule 44 (Cond_tail)


state 144

   45 Cond_tail: ELSE . Stmt SEMICOLON Stmt_prime ENDIF

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    Stmt  go to state 151
    Var   go to state 36


state 145

   46 Cond_tail: ELSEIF . Stmt SEMICOLON Stmt_prime Else_if_seq ENDIF
   47          | ELSEIF . Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF
   48 Else_if_seq: ELSEIF . Stmt SEMICOLON Stmt_prime Else_if_seq

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    Stmt  go to state 152
    Var   go to state 36


state 146

   14 Stmt: IF Bool_exp THEN Stmt SEMICOLON Stmt_prime Cond_tail .

    $default  reduce using rule 14 (Stmt)


state 147

   43 Cond_tail: Else_if_seq .

    $default  reduce using rule 43 (Cond_tail)


state 148

   15 Stmt: WHILE Bool_exp BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP .

    $default  reduce using rule 15 (Stmt)


state 149

   16 Stmt: BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp .

    $default  reduce using rule 16 (Stmt)


state 150

   13 Stmt: Var ASSIGN Bool_exp QUESTION Expr COLON Expr .

    $default  reduce using rule 13 (Stmt)


state 151

   45 Cond_tail: ELSE Stmt . SEMICOLON Stmt_prime ENDIF

    SEMICOLON  shift, and go to state 153


state 152

   46 Cond_tail: ELSEIF Stmt . SEMICOLON Stmt_prime Else_if_seq ENDIF
   47          | ELSEIF Stmt . SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF
   48 Else_if_seq: ELSEIF Stmt . SEMICOLON Stmt_prime Else_if_seq

    SEMICOLON  shift, and go to state 154


state 153

   45 Cond_tail: ELSE Stmt SEMICOLON . Stmt_prime ENDIF

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    $default  reduce using rule 23 (Stmt_prime)

    Stmt        go to state 96
    Stmt_prime  go to state 155
    Var         go to state 36


state 154

   46 Cond_tail: ELSEIF Stmt SEMICOLON . Stmt_prime Else_if_seq ENDIF
   47          | ELSEIF Stmt SEMICOLON . Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF
   48 Else_if_seq: ELSEIF Stmt SEMICOLON . Stmt_prime Else_if_seq

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    $default  reduce using rule 23 (Stmt_prime)

    Stmt        go to state 96
    Stmt_prime  go to state 156
    Var         go to state 36


state 155

   45 Cond_tail: ELSE Stmt SEMICOLON Stmt_prime . ENDIF

    ENDIF  shift, and go to state 157


state 156

   46 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime . Else_if_seq ENDIF
   47          | ELSEIF Stmt SEMICOLON Stmt_prime . Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF
   48 Else_if_seq: ELSEIF Stmt SEMICOLON Stmt_prime . Else_if_seq

    ELSEIF  shift, and go to state 158

    $default  reduce using rule 49 (Else_if_seq)

    Else_if_seq  go to state 159


state 157

   45 Cond_tail: ELSE Stmt SEMICOLON Stmt_prime ENDIF .

    $default  reduce using rule 45 (Cond_tail)


state 158

   48 Else_if_seq: ELSEIF . Stmt SEMICOLON Stmt_prime Else_if_seq

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    Stmt  go to state 160
    Var   go to state 36


state 159

   46 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq . ENDIF
   47          | ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq . ELSE Stmt SEMICOLON Stmt_prime ENDIF
   48 Else_if_seq: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq .

    ENDIF  shift, and go to state 161
    ELSE   shift, and go to state 162

    $default  reduce using rule 48 (Else_if_seq)


state 160

   48 Else_if_seq: ELSEIF Stmt . SEMICOLON Stmt_prime Else_if_seq

    SEMICOLON  shift, and go to state 163


state 161

   46 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ENDIF .

    $default  reduce using rule 46 (Cond_tail)


state 162

   47 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE . Stmt SEMICOLON Stmt_prime ENDIF

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    Stmt  go to state 164
    Var   go to state 36


state 163

   48 Else_if_seq: ELSEIF Stmt SEMICOLON . Stmt_prime Else_if_seq

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    $default  reduce using rule 23 (Stmt_prime)

    Stmt        go to state 96
    Stmt_prime  go to state 165
    Var         go to state 36


state 164

   47 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt . SEMICOLON Stmt_prime ENDIF

    SEMICOLON  shift, and go to state 166


state 165

   48 Else_if_seq: ELSEIF Stmt SEMICOLON Stmt_prime . Else_if_seq

    ELSEIF  shift, and go to state 158

    $default  reduce using rule 49 (Else_if_seq)

    Else_if_seq  go to state 167


state 166

   47 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON . Stmt_prime ENDIF

    IF         shift, and go to state 25
    WHILE      shift, and go to state 26
    BEGINLOOP  shift, and go to state 27
    BREAK      shift, and go to state 28
    CONTINUE   shift, and go to state 29
    EXIT       shift, and go to state 30
    READ       shift, and go to state 31
    WRITE      shift, and go to state 32
    SUB        shift, and go to state 33
    IDENT      shift, and go to state 34

    $default  reduce using rule 23 (Stmt_prime)

    Stmt        go to state 96
    Stmt_prime  go to state 168
    Var         go to state 36


state 167

   48 Else_if_seq: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq .

    $default  reduce using rule 48 (Else_if_seq)


state 168

   47 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime . ENDIF

    ENDIF  shift, and go to state 169


state 169

   47 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF .

    $default  reduce using rule 47 (Cond_tail)
