State 69 conflicts: 1 shift/reduce
State 71 conflicts: 1 shift/reduce
State 152 conflicts: 1 shift/reduce
State 156 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 @1: /* empty */

    2 Program: PROGRAM IDENT SEMICOLON @1 Block END_PROGRAM

    3 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    4 Dec_prime: Dec SEMICOLON Dec_prime
    5          | /* empty */

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    7    | IDENT Ident_seq COLON INTEGER

    8 @2: /* empty */

    9 Ident_seq: COMMA IDENT @2 Ident_seq
   10          | /* empty */

   11 Stmt: Var ASSIGN Expr
   12     | Var ASSIGN Bool_exp QUESTION Expr COLON Expr

   13 @3: /* empty */

   14 @4: /* empty */

   15 Stmt: IF Bool_exp @3 THEN Stmt SEMICOLON Stmt_prime @4 Cond_tail ENDIF

   16 @5: /* empty */

   17 @6: /* empty */

   18 Stmt: WHILE @5 Bool_exp @6 BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP

   19 @7: /* empty */

   20 Stmt: DO BEGINLOOP @7 Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp

   21 @8: /* empty */

   22 Stmt: READ Var @8 Read_var_prime

   23 @9: /* empty */

   24 Stmt: WRITE Var @9 Write_var_prime
   25     | BREAK
   26     | CONTINUE
   27     | EXIT

   28 @10: /* empty */

   29 Read_var_prime: COMMA Var @10 Read_var_prime
   30               | /* empty */

   31 @11: /* empty */

   32 Write_var_prime: COMMA Var @11 Write_var_prime
   33                | /* empty */

   34 Stmt_prime: Stmt SEMICOLON Stmt_prime
   35           | /* empty */

   36 Bool_exp: Relation_and_exp Or_seq

   37 Or_seq: OR Relation_and_exp Or_seq
   38       | /* empty */

   39 Relation_and_exp: Relation_exp And_seq

   40 And_seq: AND Relation_exp And_seq
   41        | /* empty */

   42 Relation_exp: NOT Expr Comp Expr
   43             | NOT FALSE
   44             | NOT TRUE
   45             | NOT L_PAREN Bool_exp R_PAREN
   46             | Expr Comp Expr
   47             | FALSE
   48             | TRUE
   49             | L_PAREN Bool_exp R_PAREN
   50             | /* empty */

   51 Comp: EQ
   52     | NEQ
   53     | LT
   54     | GT
   55     | LTE
   56     | GTE

   57 Var: IDENT
   58    | IDENT L_BRACKET Expr R_BRACKET

   59 Cond_tail: ELSE Stmt SEMICOLON Stmt_prime
   60          | Else_if_seq
   61          | Else_if_seq ELSE Stmt SEMICOLON Stmt_prime

   62 @12: /* empty */

   63 @13: /* empty */

   64 Else_if_seq: ELSEIF Bool_exp @12 Stmt SEMICOLON Stmt_prime @13 Else_if_seq
   65            | /* empty */

   66 Expr: Mult_expr Expr_seq

   67 Expr_seq: ADD Mult_expr Expr_seq
   68         | SUB Mult_expr Expr_seq
   69         | /* empty */

   70 Mult_expr: Term Mult_expr_seq

   71 Mult_expr_seq: MULT Term Mult_expr_seq
   72              | DIV Term Mult_expr_seq
   73              | MOD Term Mult_expr_seq
   74              | /* empty */

   75 Term: Var
   76     | SUB Var
   77     | L_PAREN Expr R_PAREN
   78     | SUB L_PAREN Expr R_PAREN
   79     | NUMBER
   80     | SUB NUMBER


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 2
BEGIN_PROGRAM (259) 3
END_PROGRAM (260) 2
INTEGER (261) 6 7
ARRAY (262) 6
OF (263) 6
IF (264) 15
THEN (265) 15
ENDIF (266) 15
ELSE (267) 59 61
ELSEIF (268) 64
WHILE (269) 18 20
DO (270) 20
BEGINLOOP (271) 18 20
ENDLOOP (272) 18 20
BREAK (273) 25
CONTINUE (274) 26
EXIT (275) 27
READ (276) 22
WRITE (277) 24
AND (278) 40
OR (279) 37
NOT (280) 42 43 44 45
TRUE (281) 44 48
FALSE (282) 43 47
MOD (283) 73
DIV (284) 72
MULT (285) 71
SUB (286) 68 76 78 80
ADD (287) 67
EQ (288) 51
NEQ (289) 52
LT (290) 53
GT (291) 54
LTE (292) 55
GTE (293) 56
NUMBER (294) 6 79 80
IDENT (295) 2 6 7 9 57 58
SEMICOLON (296) 2 3 4 15 18 20 34 59 61 64
COLON (297) 6 7 12
COMMA (298) 9 29 32
QUESTION (299) 12
L_BRACKET (300) 6 58
R_BRACKET (301) 6 58
L_PAREN (302) 45 49 77 78
R_PAREN (303) 45 49 77 78
ASSIGN (304) 11 12


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
Program (51)
    on left: 2, on right: 0
@1 (52)
    on left: 1, on right: 2
Block (53)
    on left: 3, on right: 2
Dec_prime (54)
    on left: 4 5, on right: 3 4
Dec (55)
    on left: 6 7, on right: 3 4
Ident_seq (56)
    on left: 9 10, on right: 6 7 9
@2 (57)
    on left: 8, on right: 9
Stmt (58)
    on left: 11 12 15 18 20 22 24 25 26 27, on right: 3 15 18 20 34
    59 61 64
@3 (59)
    on left: 13, on right: 15
@4 (60)
    on left: 14, on right: 15
@5 (61)
    on left: 16, on right: 18
@6 (62)
    on left: 17, on right: 18
@7 (63)
    on left: 19, on right: 20
@8 (64)
    on left: 21, on right: 22
@9 (65)
    on left: 23, on right: 24
Read_var_prime (66)
    on left: 29 30, on right: 22 29
@10 (67)
    on left: 28, on right: 29
Write_var_prime (68)
    on left: 32 33, on right: 24 32
@11 (69)
    on left: 31, on right: 32
Stmt_prime (70)
    on left: 34 35, on right: 3 15 18 20 34 59 61 64
Bool_exp (71)
    on left: 36, on right: 12 15 18 20 45 49 64
Or_seq (72)
    on left: 37 38, on right: 36 37
Relation_and_exp (73)
    on left: 39, on right: 36 37
And_seq (74)
    on left: 40 41, on right: 39 40
Relation_exp (75)
    on left: 42 43 44 45 46 47 48 49 50, on right: 39 40
Comp (76)
    on left: 51 52 53 54 55 56, on right: 42 46
Var (77)
    on left: 57 58, on right: 11 12 22 24 29 32 75 76
Cond_tail (78)
    on left: 59 60 61, on right: 15
Else_if_seq (79)
    on left: 64 65, on right: 60 61 64
@12 (80)
    on left: 62, on right: 64
@13 (81)
    on left: 63, on right: 64
Expr (82)
    on left: 66, on right: 11 12 42 46 58 77 78
Expr_seq (83)
    on left: 67 68 69, on right: 66 67 68
Mult_expr (84)
    on left: 70, on right: 66 67 68
Mult_expr_seq (85)
    on left: 71 72 73 74, on right: 70 71 72 73
Term (86)
    on left: 75 76 77 78 79 80, on right: 70 71 72 73


state 0

    0 $accept: . Program $end

    PROGRAM  shift, and go to state 1

    Program  go to state 2


state 1

    2 Program: PROGRAM . IDENT SEMICOLON @1 Block END_PROGRAM

    IDENT  shift, and go to state 3


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 4


state 3

    2 Program: PROGRAM IDENT . SEMICOLON @1 Block END_PROGRAM

    SEMICOLON  shift, and go to state 5


state 4

    0 $accept: Program $end .

    $default  accept


state 5

    2 Program: PROGRAM IDENT SEMICOLON . @1 Block END_PROGRAM

    $default  reduce using rule 1 (@1)

    @1  go to state 6


state 6

    2 Program: PROGRAM IDENT SEMICOLON @1 . Block END_PROGRAM

    IDENT  shift, and go to state 7

    Block  go to state 8
    Dec    go to state 9


state 7

    6 Dec: IDENT . Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    7    | IDENT . Ident_seq COLON INTEGER

    COMMA  shift, and go to state 10

    $default  reduce using rule 10 (Ident_seq)

    Ident_seq  go to state 11


state 8

    2 Program: PROGRAM IDENT SEMICOLON @1 Block . END_PROGRAM

    END_PROGRAM  shift, and go to state 12


state 9

    3 Block: Dec . SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 13


state 10

    9 Ident_seq: COMMA . IDENT @2 Ident_seq

    IDENT  shift, and go to state 14


state 11

    6 Dec: IDENT Ident_seq . COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    7    | IDENT Ident_seq . COLON INTEGER

    COLON  shift, and go to state 15


state 12

    2 Program: PROGRAM IDENT SEMICOLON @1 Block END_PROGRAM .

    $default  reduce using rule 2 (Program)


state 13

    3 Block: Dec SEMICOLON . Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    IDENT  shift, and go to state 7

    $default  reduce using rule 5 (Dec_prime)

    Dec_prime  go to state 16
    Dec        go to state 17


state 14

    9 Ident_seq: COMMA IDENT . @2 Ident_seq

    $default  reduce using rule 8 (@2)

    @2  go to state 18


state 15

    6 Dec: IDENT Ident_seq COLON . ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    7    | IDENT Ident_seq COLON . INTEGER

    INTEGER  shift, and go to state 19
    ARRAY    shift, and go to state 20


state 16

    3 Block: Dec SEMICOLON Dec_prime . BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    BEGIN_PROGRAM  shift, and go to state 21


state 17

    4 Dec_prime: Dec . SEMICOLON Dec_prime

    SEMICOLON  shift, and go to state 22


state 18

    9 Ident_seq: COMMA IDENT @2 . Ident_seq

    COMMA  shift, and go to state 10

    $default  reduce using rule 10 (Ident_seq)

    Ident_seq  go to state 23


state 19

    7 Dec: IDENT Ident_seq COLON INTEGER .

    $default  reduce using rule 7 (Dec)


state 20

    6 Dec: IDENT Ident_seq COLON ARRAY . L_BRACKET NUMBER R_BRACKET OF INTEGER

    L_BRACKET  shift, and go to state 24


state 21

    3 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM . Stmt SEMICOLON Stmt_prime

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    Stmt  go to state 34
    Var   go to state 35


state 22

    4 Dec_prime: Dec SEMICOLON . Dec_prime

    IDENT  shift, and go to state 7

    $default  reduce using rule 5 (Dec_prime)

    Dec_prime  go to state 36
    Dec        go to state 17


state 23

    9 Ident_seq: COMMA IDENT @2 Ident_seq .

    $default  reduce using rule 9 (Ident_seq)


state 24

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET . NUMBER R_BRACKET OF INTEGER

    NUMBER  shift, and go to state 37


state 25

   15 Stmt: IF . Bool_exp @3 THEN Stmt SEMICOLON Stmt_prime @4 Cond_tail ENDIF

    NOT      shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 43

    $default  reduce using rule 50 (Relation_exp)

    Bool_exp          go to state 44
    Relation_and_exp  go to state 45
    Relation_exp      go to state 46
    Var               go to state 47
    Expr              go to state 48
    Mult_expr         go to state 49
    Term              go to state 50


state 26

   18 Stmt: WHILE . @5 Bool_exp @6 BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP

    $default  reduce using rule 16 (@5)

    @5  go to state 51


state 27

   20 Stmt: DO . BEGINLOOP @7 Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp

    BEGINLOOP  shift, and go to state 52


state 28

   25 Stmt: BREAK .

    $default  reduce using rule 25 (Stmt)


state 29

   26 Stmt: CONTINUE .

    $default  reduce using rule 26 (Stmt)


state 30

   27 Stmt: EXIT .

    $default  reduce using rule 27 (Stmt)


state 31

   22 Stmt: READ . Var @8 Read_var_prime

    IDENT  shift, and go to state 33

    Var  go to state 53


state 32

   24 Stmt: WRITE . Var @9 Write_var_prime

    IDENT  shift, and go to state 33

    Var  go to state 54


state 33

   57 Var: IDENT .
   58    | IDENT . L_BRACKET Expr R_BRACKET

    L_BRACKET  shift, and go to state 55

    $default  reduce using rule 57 (Var)


state 34

    3 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt . SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 56


state 35

   11 Stmt: Var . ASSIGN Expr
   12     | Var . ASSIGN Bool_exp QUESTION Expr COLON Expr

    ASSIGN  shift, and go to state 57


state 36

    4 Dec_prime: Dec SEMICOLON Dec_prime .

    $default  reduce using rule 4 (Dec_prime)


state 37

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER . R_BRACKET OF INTEGER

    R_BRACKET  shift, and go to state 58


state 38

   42 Relation_exp: NOT . Expr Comp Expr
   43             | NOT . FALSE
   44             | NOT . TRUE
   45             | NOT . L_PAREN Bool_exp R_PAREN

    TRUE     shift, and go to state 59
    FALSE    shift, and go to state 60
    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 61

    Var        go to state 47
    Expr       go to state 62
    Mult_expr  go to state 49
    Term       go to state 50


state 39

   48 Relation_exp: TRUE .

    $default  reduce using rule 48 (Relation_exp)


state 40

   47 Relation_exp: FALSE .

    $default  reduce using rule 47 (Relation_exp)


state 41

   76 Term: SUB . Var
   78     | SUB . L_PAREN Expr R_PAREN
   80     | SUB . NUMBER

    NUMBER   shift, and go to state 63
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 64

    Var  go to state 65


state 42

   79 Term: NUMBER .

    $default  reduce using rule 79 (Term)


state 43

   49 Relation_exp: L_PAREN . Bool_exp R_PAREN
   77 Term: L_PAREN . Expr R_PAREN

    NOT      shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 43

    $default  reduce using rule 50 (Relation_exp)

    Bool_exp          go to state 66
    Relation_and_exp  go to state 45
    Relation_exp      go to state 46
    Var               go to state 47
    Expr              go to state 67
    Mult_expr         go to state 49
    Term              go to state 50


state 44

   15 Stmt: IF Bool_exp . @3 THEN Stmt SEMICOLON Stmt_prime @4 Cond_tail ENDIF

    $default  reduce using rule 13 (@3)

    @3  go to state 68


state 45

   36 Bool_exp: Relation_and_exp . Or_seq

    OR  shift, and go to state 69

    $default  reduce using rule 38 (Or_seq)

    Or_seq  go to state 70


state 46

   39 Relation_and_exp: Relation_exp . And_seq

    AND  shift, and go to state 71

    $default  reduce using rule 41 (And_seq)

    And_seq  go to state 72


state 47

   75 Term: Var .

    $default  reduce using rule 75 (Term)


state 48

   46 Relation_exp: Expr . Comp Expr

    EQ   shift, and go to state 73
    NEQ  shift, and go to state 74
    LT   shift, and go to state 75
    GT   shift, and go to state 76
    LTE  shift, and go to state 77
    GTE  shift, and go to state 78

    Comp  go to state 79


state 49

   66 Expr: Mult_expr . Expr_seq

    SUB  shift, and go to state 80
    ADD  shift, and go to state 81

    $default  reduce using rule 69 (Expr_seq)

    Expr_seq  go to state 82


state 50

   70 Mult_expr: Term . Mult_expr_seq

    MOD   shift, and go to state 83
    DIV   shift, and go to state 84
    MULT  shift, and go to state 85

    $default  reduce using rule 74 (Mult_expr_seq)

    Mult_expr_seq  go to state 86


state 51

   18 Stmt: WHILE @5 . Bool_exp @6 BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP

    NOT      shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 43

    $default  reduce using rule 50 (Relation_exp)

    Bool_exp          go to state 87
    Relation_and_exp  go to state 45
    Relation_exp      go to state 46
    Var               go to state 47
    Expr              go to state 48
    Mult_expr         go to state 49
    Term              go to state 50


state 52

   20 Stmt: DO BEGINLOOP . @7 Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp

    $default  reduce using rule 19 (@7)

    @7  go to state 88


state 53

   22 Stmt: READ Var . @8 Read_var_prime

    $default  reduce using rule 21 (@8)

    @8  go to state 89


state 54

   24 Stmt: WRITE Var . @9 Write_var_prime

    $default  reduce using rule 23 (@9)

    @9  go to state 90


state 55

   58 Var: IDENT L_BRACKET . Expr R_BRACKET

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var        go to state 47
    Expr       go to state 92
    Mult_expr  go to state 49
    Term       go to state 50


state 56

    3 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON . Stmt_prime

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    $default  reduce using rule 35 (Stmt_prime)

    Stmt        go to state 93
    Stmt_prime  go to state 94
    Var         go to state 35


state 57

   11 Stmt: Var ASSIGN . Expr
   12     | Var ASSIGN . Bool_exp QUESTION Expr COLON Expr

    NOT      shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 43

    $default  reduce using rule 50 (Relation_exp)

    Bool_exp          go to state 95
    Relation_and_exp  go to state 45
    Relation_exp      go to state 46
    Var               go to state 47
    Expr              go to state 96
    Mult_expr         go to state 49
    Term              go to state 50


state 58

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET . OF INTEGER

    OF  shift, and go to state 97


state 59

   44 Relation_exp: NOT TRUE .

    $default  reduce using rule 44 (Relation_exp)


state 60

   43 Relation_exp: NOT FALSE .

    $default  reduce using rule 43 (Relation_exp)


state 61

   45 Relation_exp: NOT L_PAREN . Bool_exp R_PAREN
   77 Term: L_PAREN . Expr R_PAREN

    NOT      shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 43

    $default  reduce using rule 50 (Relation_exp)

    Bool_exp          go to state 98
    Relation_and_exp  go to state 45
    Relation_exp      go to state 46
    Var               go to state 47
    Expr              go to state 67
    Mult_expr         go to state 49
    Term              go to state 50


state 62

   42 Relation_exp: NOT Expr . Comp Expr

    EQ   shift, and go to state 73
    NEQ  shift, and go to state 74
    LT   shift, and go to state 75
    GT   shift, and go to state 76
    LTE  shift, and go to state 77
    GTE  shift, and go to state 78

    Comp  go to state 99


state 63

   80 Term: SUB NUMBER .

    $default  reduce using rule 80 (Term)


state 64

   78 Term: SUB L_PAREN . Expr R_PAREN

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var        go to state 47
    Expr       go to state 100
    Mult_expr  go to state 49
    Term       go to state 50


state 65

   76 Term: SUB Var .

    $default  reduce using rule 76 (Term)


state 66

   49 Relation_exp: L_PAREN Bool_exp . R_PAREN

    R_PAREN  shift, and go to state 101


state 67

   46 Relation_exp: Expr . Comp Expr
   77 Term: L_PAREN Expr . R_PAREN

    EQ       shift, and go to state 73
    NEQ      shift, and go to state 74
    LT       shift, and go to state 75
    GT       shift, and go to state 76
    LTE      shift, and go to state 77
    GTE      shift, and go to state 78
    R_PAREN  shift, and go to state 102

    Comp  go to state 79


state 68

   15 Stmt: IF Bool_exp @3 . THEN Stmt SEMICOLON Stmt_prime @4 Cond_tail ENDIF

    THEN  shift, and go to state 103


state 69

   37 Or_seq: OR . Relation_and_exp Or_seq

    NOT      shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 43

    IDENT     [reduce using rule 50 (Relation_exp)]
    $default  reduce using rule 50 (Relation_exp)

    Relation_and_exp  go to state 104
    Relation_exp      go to state 46
    Var               go to state 47
    Expr              go to state 48
    Mult_expr         go to state 49
    Term              go to state 50


state 70

   36 Bool_exp: Relation_and_exp Or_seq .

    $default  reduce using rule 36 (Bool_exp)


state 71

   40 And_seq: AND . Relation_exp And_seq

    NOT      shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 43

    IDENT     [reduce using rule 50 (Relation_exp)]
    $default  reduce using rule 50 (Relation_exp)

    Relation_exp  go to state 105
    Var           go to state 47
    Expr          go to state 48
    Mult_expr     go to state 49
    Term          go to state 50


state 72

   39 Relation_and_exp: Relation_exp And_seq .

    $default  reduce using rule 39 (Relation_and_exp)


state 73

   51 Comp: EQ .

    $default  reduce using rule 51 (Comp)


state 74

   52 Comp: NEQ .

    $default  reduce using rule 52 (Comp)


state 75

   53 Comp: LT .

    $default  reduce using rule 53 (Comp)


state 76

   54 Comp: GT .

    $default  reduce using rule 54 (Comp)


state 77

   55 Comp: LTE .

    $default  reduce using rule 55 (Comp)


state 78

   56 Comp: GTE .

    $default  reduce using rule 56 (Comp)


state 79

   46 Relation_exp: Expr Comp . Expr

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var        go to state 47
    Expr       go to state 106
    Mult_expr  go to state 49
    Term       go to state 50


state 80

   68 Expr_seq: SUB . Mult_expr Expr_seq

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var        go to state 47
    Mult_expr  go to state 107
    Term       go to state 50


state 81

   67 Expr_seq: ADD . Mult_expr Expr_seq

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var        go to state 47
    Mult_expr  go to state 108
    Term       go to state 50


state 82

   66 Expr: Mult_expr Expr_seq .

    $default  reduce using rule 66 (Expr)


state 83

   73 Mult_expr_seq: MOD . Term Mult_expr_seq

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var   go to state 47
    Term  go to state 109


state 84

   72 Mult_expr_seq: DIV . Term Mult_expr_seq

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var   go to state 47
    Term  go to state 110


state 85

   71 Mult_expr_seq: MULT . Term Mult_expr_seq

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var   go to state 47
    Term  go to state 111


state 86

   70 Mult_expr: Term Mult_expr_seq .

    $default  reduce using rule 70 (Mult_expr)


state 87

   18 Stmt: WHILE @5 Bool_exp . @6 BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP

    $default  reduce using rule 17 (@6)

    @6  go to state 112


state 88

   20 Stmt: DO BEGINLOOP @7 . Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    Stmt  go to state 113
    Var   go to state 35


state 89

   22 Stmt: READ Var @8 . Read_var_prime

    COMMA  shift, and go to state 114

    $default  reduce using rule 30 (Read_var_prime)

    Read_var_prime  go to state 115


state 90

   24 Stmt: WRITE Var @9 . Write_var_prime

    COMMA  shift, and go to state 116

    $default  reduce using rule 33 (Write_var_prime)

    Write_var_prime  go to state 117


state 91

   77 Term: L_PAREN . Expr R_PAREN

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var        go to state 47
    Expr       go to state 118
    Mult_expr  go to state 49
    Term       go to state 50


state 92

   58 Var: IDENT L_BRACKET Expr . R_BRACKET

    R_BRACKET  shift, and go to state 119


state 93

   34 Stmt_prime: Stmt . SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 120


state 94

    3 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime .

    $default  reduce using rule 3 (Block)


state 95

   12 Stmt: Var ASSIGN Bool_exp . QUESTION Expr COLON Expr

    QUESTION  shift, and go to state 121


state 96

   11 Stmt: Var ASSIGN Expr .
   46 Relation_exp: Expr . Comp Expr

    EQ   shift, and go to state 73
    NEQ  shift, and go to state 74
    LT   shift, and go to state 75
    GT   shift, and go to state 76
    LTE  shift, and go to state 77
    GTE  shift, and go to state 78

    $default  reduce using rule 11 (Stmt)

    Comp  go to state 79


state 97

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 122


state 98

   45 Relation_exp: NOT L_PAREN Bool_exp . R_PAREN

    R_PAREN  shift, and go to state 123


state 99

   42 Relation_exp: NOT Expr Comp . Expr

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var        go to state 47
    Expr       go to state 124
    Mult_expr  go to state 49
    Term       go to state 50


state 100

   78 Term: SUB L_PAREN Expr . R_PAREN

    R_PAREN  shift, and go to state 125


state 101

   49 Relation_exp: L_PAREN Bool_exp R_PAREN .

    $default  reduce using rule 49 (Relation_exp)


state 102

   77 Term: L_PAREN Expr R_PAREN .

    $default  reduce using rule 77 (Term)


state 103

   15 Stmt: IF Bool_exp @3 THEN . Stmt SEMICOLON Stmt_prime @4 Cond_tail ENDIF

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    Stmt  go to state 126
    Var   go to state 35


state 104

   37 Or_seq: OR Relation_and_exp . Or_seq

    OR  shift, and go to state 69

    $default  reduce using rule 38 (Or_seq)

    Or_seq  go to state 127


state 105

   40 And_seq: AND Relation_exp . And_seq

    AND  shift, and go to state 71

    $default  reduce using rule 41 (And_seq)

    And_seq  go to state 128


state 106

   46 Relation_exp: Expr Comp Expr .

    $default  reduce using rule 46 (Relation_exp)


state 107

   68 Expr_seq: SUB Mult_expr . Expr_seq

    SUB  shift, and go to state 80
    ADD  shift, and go to state 81

    $default  reduce using rule 69 (Expr_seq)

    Expr_seq  go to state 129


state 108

   67 Expr_seq: ADD Mult_expr . Expr_seq

    SUB  shift, and go to state 80
    ADD  shift, and go to state 81

    $default  reduce using rule 69 (Expr_seq)

    Expr_seq  go to state 130


state 109

   73 Mult_expr_seq: MOD Term . Mult_expr_seq

    MOD   shift, and go to state 83
    DIV   shift, and go to state 84
    MULT  shift, and go to state 85

    $default  reduce using rule 74 (Mult_expr_seq)

    Mult_expr_seq  go to state 131


state 110

   72 Mult_expr_seq: DIV Term . Mult_expr_seq

    MOD   shift, and go to state 83
    DIV   shift, and go to state 84
    MULT  shift, and go to state 85

    $default  reduce using rule 74 (Mult_expr_seq)

    Mult_expr_seq  go to state 132


state 111

   71 Mult_expr_seq: MULT Term . Mult_expr_seq

    MOD   shift, and go to state 83
    DIV   shift, and go to state 84
    MULT  shift, and go to state 85

    $default  reduce using rule 74 (Mult_expr_seq)

    Mult_expr_seq  go to state 133


state 112

   18 Stmt: WHILE @5 Bool_exp @6 . BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP

    BEGINLOOP  shift, and go to state 134


state 113

   20 Stmt: DO BEGINLOOP @7 Stmt . SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp

    SEMICOLON  shift, and go to state 135


state 114

   29 Read_var_prime: COMMA . Var @10 Read_var_prime

    IDENT  shift, and go to state 33

    Var  go to state 136


state 115

   22 Stmt: READ Var @8 Read_var_prime .

    $default  reduce using rule 22 (Stmt)


state 116

   32 Write_var_prime: COMMA . Var @11 Write_var_prime

    IDENT  shift, and go to state 33

    Var  go to state 137


state 117

   24 Stmt: WRITE Var @9 Write_var_prime .

    $default  reduce using rule 24 (Stmt)


state 118

   77 Term: L_PAREN Expr . R_PAREN

    R_PAREN  shift, and go to state 102


state 119

   58 Var: IDENT L_BRACKET Expr R_BRACKET .

    $default  reduce using rule 58 (Var)


state 120

   34 Stmt_prime: Stmt SEMICOLON . Stmt_prime

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    $default  reduce using rule 35 (Stmt_prime)

    Stmt        go to state 93
    Stmt_prime  go to state 138
    Var         go to state 35


state 121

   12 Stmt: Var ASSIGN Bool_exp QUESTION . Expr COLON Expr

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var        go to state 47
    Expr       go to state 139
    Mult_expr  go to state 49
    Term       go to state 50


state 122

    6 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER .

    $default  reduce using rule 6 (Dec)


state 123

   45 Relation_exp: NOT L_PAREN Bool_exp R_PAREN .

    $default  reduce using rule 45 (Relation_exp)


state 124

   42 Relation_exp: NOT Expr Comp Expr .

    $default  reduce using rule 42 (Relation_exp)


state 125

   78 Term: SUB L_PAREN Expr R_PAREN .

    $default  reduce using rule 78 (Term)


state 126

   15 Stmt: IF Bool_exp @3 THEN Stmt . SEMICOLON Stmt_prime @4 Cond_tail ENDIF

    SEMICOLON  shift, and go to state 140


state 127

   37 Or_seq: OR Relation_and_exp Or_seq .

    $default  reduce using rule 37 (Or_seq)


state 128

   40 And_seq: AND Relation_exp And_seq .

    $default  reduce using rule 40 (And_seq)


state 129

   68 Expr_seq: SUB Mult_expr Expr_seq .

    $default  reduce using rule 68 (Expr_seq)


state 130

   67 Expr_seq: ADD Mult_expr Expr_seq .

    $default  reduce using rule 67 (Expr_seq)


state 131

   73 Mult_expr_seq: MOD Term Mult_expr_seq .

    $default  reduce using rule 73 (Mult_expr_seq)


state 132

   72 Mult_expr_seq: DIV Term Mult_expr_seq .

    $default  reduce using rule 72 (Mult_expr_seq)


state 133

   71 Mult_expr_seq: MULT Term Mult_expr_seq .

    $default  reduce using rule 71 (Mult_expr_seq)


state 134

   18 Stmt: WHILE @5 Bool_exp @6 BEGINLOOP . Stmt SEMICOLON Stmt_prime ENDLOOP

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    Stmt  go to state 141
    Var   go to state 35


state 135

   20 Stmt: DO BEGINLOOP @7 Stmt SEMICOLON . Stmt_prime ENDLOOP WHILE Bool_exp

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    $default  reduce using rule 35 (Stmt_prime)

    Stmt        go to state 93
    Stmt_prime  go to state 142
    Var         go to state 35


state 136

   29 Read_var_prime: COMMA Var . @10 Read_var_prime

    $default  reduce using rule 28 (@10)

    @10  go to state 143


state 137

   32 Write_var_prime: COMMA Var . @11 Write_var_prime

    $default  reduce using rule 31 (@11)

    @11  go to state 144


state 138

   34 Stmt_prime: Stmt SEMICOLON Stmt_prime .

    $default  reduce using rule 34 (Stmt_prime)


state 139

   12 Stmt: Var ASSIGN Bool_exp QUESTION Expr . COLON Expr

    COLON  shift, and go to state 145


state 140

   15 Stmt: IF Bool_exp @3 THEN Stmt SEMICOLON . Stmt_prime @4 Cond_tail ENDIF

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    $default  reduce using rule 35 (Stmt_prime)

    Stmt        go to state 93
    Stmt_prime  go to state 146
    Var         go to state 35


state 141

   18 Stmt: WHILE @5 Bool_exp @6 BEGINLOOP Stmt . SEMICOLON Stmt_prime ENDLOOP

    SEMICOLON  shift, and go to state 147


state 142

   20 Stmt: DO BEGINLOOP @7 Stmt SEMICOLON Stmt_prime . ENDLOOP WHILE Bool_exp

    ENDLOOP  shift, and go to state 148


state 143

   29 Read_var_prime: COMMA Var @10 . Read_var_prime

    COMMA  shift, and go to state 114

    $default  reduce using rule 30 (Read_var_prime)

    Read_var_prime  go to state 149


state 144

   32 Write_var_prime: COMMA Var @11 . Write_var_prime

    COMMA  shift, and go to state 116

    $default  reduce using rule 33 (Write_var_prime)

    Write_var_prime  go to state 150


state 145

   12 Stmt: Var ASSIGN Bool_exp QUESTION Expr COLON . Expr

    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 91

    Var        go to state 47
    Expr       go to state 151
    Mult_expr  go to state 49
    Term       go to state 50


state 146

   15 Stmt: IF Bool_exp @3 THEN Stmt SEMICOLON Stmt_prime . @4 Cond_tail ENDIF

    $default  reduce using rule 14 (@4)

    @4  go to state 152


state 147

   18 Stmt: WHILE @5 Bool_exp @6 BEGINLOOP Stmt SEMICOLON . Stmt_prime ENDLOOP

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    $default  reduce using rule 35 (Stmt_prime)

    Stmt        go to state 93
    Stmt_prime  go to state 153
    Var         go to state 35


state 148

   20 Stmt: DO BEGINLOOP @7 Stmt SEMICOLON Stmt_prime ENDLOOP . WHILE Bool_exp

    WHILE  shift, and go to state 154


state 149

   29 Read_var_prime: COMMA Var @10 Read_var_prime .

    $default  reduce using rule 29 (Read_var_prime)


state 150

   32 Write_var_prime: COMMA Var @11 Write_var_prime .

    $default  reduce using rule 32 (Write_var_prime)


state 151

   12 Stmt: Var ASSIGN Bool_exp QUESTION Expr COLON Expr .

    $default  reduce using rule 12 (Stmt)


state 152

   15 Stmt: IF Bool_exp @3 THEN Stmt SEMICOLON Stmt_prime @4 . Cond_tail ENDIF

    ELSE    shift, and go to state 155
    ELSEIF  shift, and go to state 156

    ELSE      [reduce using rule 65 (Else_if_seq)]
    $default  reduce using rule 65 (Else_if_seq)

    Cond_tail    go to state 157
    Else_if_seq  go to state 158


state 153

   18 Stmt: WHILE @5 Bool_exp @6 BEGINLOOP Stmt SEMICOLON Stmt_prime . ENDLOOP

    ENDLOOP  shift, and go to state 159


state 154

   20 Stmt: DO BEGINLOOP @7 Stmt SEMICOLON Stmt_prime ENDLOOP WHILE . Bool_exp

    NOT      shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 43

    $default  reduce using rule 50 (Relation_exp)

    Bool_exp          go to state 160
    Relation_and_exp  go to state 45
    Relation_exp      go to state 46
    Var               go to state 47
    Expr              go to state 48
    Mult_expr         go to state 49
    Term              go to state 50


state 155

   59 Cond_tail: ELSE . Stmt SEMICOLON Stmt_prime

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    Stmt  go to state 161
    Var   go to state 35


state 156

   64 Else_if_seq: ELSEIF . Bool_exp @12 Stmt SEMICOLON Stmt_prime @13 Else_if_seq

    NOT      shift, and go to state 38
    TRUE     shift, and go to state 39
    FALSE    shift, and go to state 40
    SUB      shift, and go to state 41
    NUMBER   shift, and go to state 42
    IDENT    shift, and go to state 33
    L_PAREN  shift, and go to state 43

    IDENT     [reduce using rule 50 (Relation_exp)]
    $default  reduce using rule 50 (Relation_exp)

    Bool_exp          go to state 162
    Relation_and_exp  go to state 45
    Relation_exp      go to state 46
    Var               go to state 47
    Expr              go to state 48
    Mult_expr         go to state 49
    Term              go to state 50


state 157

   15 Stmt: IF Bool_exp @3 THEN Stmt SEMICOLON Stmt_prime @4 Cond_tail . ENDIF

    ENDIF  shift, and go to state 163


state 158

   60 Cond_tail: Else_if_seq .
   61          | Else_if_seq . ELSE Stmt SEMICOLON Stmt_prime

    ELSE  shift, and go to state 164

    $default  reduce using rule 60 (Cond_tail)


state 159

   18 Stmt: WHILE @5 Bool_exp @6 BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP .

    $default  reduce using rule 18 (Stmt)


state 160

   20 Stmt: DO BEGINLOOP @7 Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp .

    $default  reduce using rule 20 (Stmt)


state 161

   59 Cond_tail: ELSE Stmt . SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 165


state 162

   64 Else_if_seq: ELSEIF Bool_exp . @12 Stmt SEMICOLON Stmt_prime @13 Else_if_seq

    $default  reduce using rule 62 (@12)

    @12  go to state 166


state 163

   15 Stmt: IF Bool_exp @3 THEN Stmt SEMICOLON Stmt_prime @4 Cond_tail ENDIF .

    $default  reduce using rule 15 (Stmt)


state 164

   61 Cond_tail: Else_if_seq ELSE . Stmt SEMICOLON Stmt_prime

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    Stmt  go to state 167
    Var   go to state 35


state 165

   59 Cond_tail: ELSE Stmt SEMICOLON . Stmt_prime

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    $default  reduce using rule 35 (Stmt_prime)

    Stmt        go to state 93
    Stmt_prime  go to state 168
    Var         go to state 35


state 166

   64 Else_if_seq: ELSEIF Bool_exp @12 . Stmt SEMICOLON Stmt_prime @13 Else_if_seq

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    Stmt  go to state 169
    Var   go to state 35


state 167

   61 Cond_tail: Else_if_seq ELSE Stmt . SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 170


state 168

   59 Cond_tail: ELSE Stmt SEMICOLON Stmt_prime .

    $default  reduce using rule 59 (Cond_tail)


state 169

   64 Else_if_seq: ELSEIF Bool_exp @12 Stmt . SEMICOLON Stmt_prime @13 Else_if_seq

    SEMICOLON  shift, and go to state 171


state 170

   61 Cond_tail: Else_if_seq ELSE Stmt SEMICOLON . Stmt_prime

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    $default  reduce using rule 35 (Stmt_prime)

    Stmt        go to state 93
    Stmt_prime  go to state 172
    Var         go to state 35


state 171

   64 Else_if_seq: ELSEIF Bool_exp @12 Stmt SEMICOLON . Stmt_prime @13 Else_if_seq

    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    DO        shift, and go to state 27
    BREAK     shift, and go to state 28
    CONTINUE  shift, and go to state 29
    EXIT      shift, and go to state 30
    READ      shift, and go to state 31
    WRITE     shift, and go to state 32
    IDENT     shift, and go to state 33

    $default  reduce using rule 35 (Stmt_prime)

    Stmt        go to state 93
    Stmt_prime  go to state 173
    Var         go to state 35


state 172

   61 Cond_tail: Else_if_seq ELSE Stmt SEMICOLON Stmt_prime .

    $default  reduce using rule 61 (Cond_tail)


state 173

   64 Else_if_seq: ELSEIF Bool_exp @12 Stmt SEMICOLON Stmt_prime . @13 Else_if_seq

    $default  reduce using rule 63 (@13)

    @13  go to state 174


state 174

   64 Else_if_seq: ELSEIF Bool_exp @12 Stmt SEMICOLON Stmt_prime @13 . Else_if_seq

    ELSEIF  shift, and go to state 156

    $default  reduce using rule 65 (Else_if_seq)

    Else_if_seq  go to state 175


state 175

   64 Else_if_seq: ELSEIF Bool_exp @12 Stmt SEMICOLON Stmt_prime @13 Else_if_seq .

    $default  reduce using rule 64 (Else_if_seq)
