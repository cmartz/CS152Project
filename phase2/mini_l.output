Useless nonterminals

   Not_prime
   Neg_prime


Terminals which are not used

   DO


Useless rules

   65 Not_prime: NOT
   66          | /* empty */

   67 Neg_prime: SUB
   68          | /* empty */


Grammar

    0 $accept: Program $end

    1 Program: PROGRAM IDENT SEMICOLON Block END_PROGRAM

    2 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    3 Dec_prime: Dec SEMICOLON Dec_prime
    4          | /* empty */

    5 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    6    | IDENT Ident_seq COLON INTEGER

    7 Ident_seq: COMMA IDENT Ident_seq
    8          | /* empty */

    9 Stmt: Var ASSIGN Expr
   10     | Var ASSIGN Bool_exp QUESTION Expr COLON Expr
   11     | IF Bool_exp THEN Stmt SEMICOLON Stmt_prime Cond_tail
   12     | WHILE Bool_exp BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP
   13     | BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp
   14     | READ Var SEMICOLON Var_prime
   15     | WRITE Var SEMICOLON Var_prime
   16     | BREAK
   17     | CONTINUE
   18     | EXIT

   19 Stmt_prime: Stmt SEMICOLON Stmt_prime
   20           | /* empty */

   21 Bool_exp: Relation_and_exp
   22         | Relation_and_exp OR Relation_and_exp

   23 Relation_and_exp: Relation_exp
   24                 | Relation_exp AND Relation_exp

   25 Relation_exp: NOT Expr Comp Expr
   26             | NOT FALSE
   27             | NOT TRUE
   28             | NOT L_PAREN Bool_exp R_PAREN
   29             | Expr Comp Expr
   30             | FALSE
   31             | TRUE
   32             | L_PAREN Bool_exp R_PAREN

   33 Var: IDENT
   34    | IDENT L_PAREN Expr R_PAREN

   35 Var_prime: Var SEMICOLON Var_prime
   36          | /* empty */

   37 Cond_tail: Else_if_seq
   38          | ENDIF
   39          | ELSE Stmt SEMICOLON Stmt_prime ENDIF
   40          | ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ENDIF
   41          | ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF

   42 Else_if_seq: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq
   43            | /* empty */

   44 Comp: EQ
   45     | NEQ
   46     | LT
   47     | GT
   48     | LTE
   49     | GTE

   50 Expr: Mult_expr Expr_seq

   51 Expr_seq: ADD Mult_expr Expr_seq
   52         | SUB Mult_expr Expr_seq
   53         | /* empty */

   54 Mult_expr: Term Mult_expr_seq

   55 Mult_expr_seq: MULT Term Mult_expr_seq
   56              | DIV Term Mult_expr_seq
   57              | MOD Term Mult_expr_seq
   58              | /* empty */

   59 Term: Var
   60     | NUMBER
   61     | L_PAREN Expr R_PAREN
   62     | SUB Var
   63     | SUB NUMBER
   64     | SUB L_PAREN Expr R_PAREN


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
BEGIN_PROGRAM (259) 2
END_PROGRAM (260) 1
INTEGER (261) 5 6
ARRAY (262) 5
OF (263) 5
IF (264) 11
THEN (265) 11
ENDIF (266) 38 39 40 41
ELSE (267) 39 41
ELSEIF (268) 40 41 42
WHILE (269) 12 13
DO (270)
BEGINLOOP (271) 12 13
ENDLOOP (272) 12 13
BREAK (273) 16
CONTINUE (274) 17
EXIT (275) 18
READ (276) 14
WRITE (277) 15
AND (278) 24
OR (279) 22
NOT (280) 25 26 27 28
TRUE (281) 27 31
FALSE (282) 26 30
ADD (283) 51
SUB (284) 52 62 63 64
MULT (285) 55
DIV (286) 56
MOD (287) 57
EQ (288) 44
NEQ (289) 45
LT (290) 46
GT (291) 47
LTE (292) 48
GTE (293) 49
NUMBER (294) 5 60 63
IDENT (295) 1 5 6 7 33 34
SEMICOLON (296) 1 2 3 11 12 13 14 15 19 35 39 40 41 42
COLON (297) 5 6 10
COMMA (298) 7
QUESTION (299) 10
L_BRACKET (300) 5
R_BRACKET (301) 5
L_PAREN (302) 28 32 34 61 64
R_PAREN (303) 28 32 34 61 64
ASSIGN (304) 9 10


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
Program (51)
    on left: 1, on right: 0
Block (52)
    on left: 2, on right: 1
Dec_prime (53)
    on left: 3 4, on right: 2 3
Dec (54)
    on left: 5 6, on right: 2 3
Ident_seq (55)
    on left: 7 8, on right: 5 6 7
Stmt (56)
    on left: 9 10 11 12 13 14 15 16 17 18, on right: 2 11 12 13 19
    39 40 41 42
Stmt_prime (57)
    on left: 19 20, on right: 2 11 12 13 19 39 40 41 42
Bool_exp (58)
    on left: 21 22, on right: 10 11 12 13 28 32
Relation_and_exp (59)
    on left: 23 24, on right: 21 22
Relation_exp (60)
    on left: 25 26 27 28 29 30 31 32, on right: 23 24
Var (61)
    on left: 33 34, on right: 9 10 14 15 35 59 62
Var_prime (62)
    on left: 35 36, on right: 14 15 35
Cond_tail (63)
    on left: 37 38 39 40 41, on right: 11
Else_if_seq (64)
    on left: 42 43, on right: 37 40 41 42
Comp (65)
    on left: 44 45 46 47 48 49, on right: 25 29
Expr (66)
    on left: 50, on right: 9 10 25 29 34 61 64
Expr_seq (67)
    on left: 51 52 53, on right: 50 51 52
Mult_expr (68)
    on left: 54, on right: 50 51 52
Mult_expr_seq (69)
    on left: 55 56 57 58, on right: 54 55 56 57
Term (70)
    on left: 59 60 61 62 63 64, on right: 54 55 56 57


state 0

    0 $accept: . Program $end

    PROGRAM  shift, and go to state 1

    Program  go to state 2


state 1

    1 Program: PROGRAM . IDENT SEMICOLON Block END_PROGRAM

    IDENT  shift, and go to state 3


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 4


state 3

    1 Program: PROGRAM IDENT . SEMICOLON Block END_PROGRAM

    SEMICOLON  shift, and go to state 5


state 4

    0 $accept: Program $end .

    $default  accept


state 5

    1 Program: PROGRAM IDENT SEMICOLON . Block END_PROGRAM

    IDENT  shift, and go to state 6

    Block  go to state 7
    Dec    go to state 8


state 6

    5 Dec: IDENT . Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    6    | IDENT . Ident_seq COLON INTEGER

    COMMA  shift, and go to state 9

    $default  reduce using rule 8 (Ident_seq)

    Ident_seq  go to state 10


state 7

    1 Program: PROGRAM IDENT SEMICOLON Block . END_PROGRAM

    END_PROGRAM  shift, and go to state 11


state 8

    2 Block: Dec . SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 12


state 9

    7 Ident_seq: COMMA . IDENT Ident_seq

    IDENT  shift, and go to state 13


state 10

    5 Dec: IDENT Ident_seq . COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    6    | IDENT Ident_seq . COLON INTEGER

    COLON  shift, and go to state 14


state 11

    1 Program: PROGRAM IDENT SEMICOLON Block END_PROGRAM .

    $default  reduce using rule 1 (Program)


state 12

    2 Block: Dec SEMICOLON . Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    IDENT  shift, and go to state 6

    $default  reduce using rule 4 (Dec_prime)

    Dec_prime  go to state 15
    Dec        go to state 16


state 13

    7 Ident_seq: COMMA IDENT . Ident_seq

    COMMA  shift, and go to state 9

    $default  reduce using rule 8 (Ident_seq)

    Ident_seq  go to state 17


state 14

    5 Dec: IDENT Ident_seq COLON . ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER
    6    | IDENT Ident_seq COLON . INTEGER

    INTEGER  shift, and go to state 18
    ARRAY    shift, and go to state 19


state 15

    2 Block: Dec SEMICOLON Dec_prime . BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime

    BEGIN_PROGRAM  shift, and go to state 20


state 16

    3 Dec_prime: Dec . SEMICOLON Dec_prime

    SEMICOLON  shift, and go to state 21


state 17

    7 Ident_seq: COMMA IDENT Ident_seq .

    $default  reduce using rule 7 (Ident_seq)


state 18

    6 Dec: IDENT Ident_seq COLON INTEGER .

    $default  reduce using rule 6 (Dec)


state 19

    5 Dec: IDENT Ident_seq COLON ARRAY . L_BRACKET NUMBER R_BRACKET OF INTEGER

    L_BRACKET  shift, and go to state 22


state 20

    2 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM . Stmt SEMICOLON Stmt_prime

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    Stmt  go to state 32
    Var   go to state 33


state 21

    3 Dec_prime: Dec SEMICOLON . Dec_prime

    IDENT  shift, and go to state 6

    $default  reduce using rule 4 (Dec_prime)

    Dec_prime  go to state 34
    Dec        go to state 16


state 22

    5 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET . NUMBER R_BRACKET OF INTEGER

    NUMBER  shift, and go to state 35


state 23

   11 Stmt: IF . Bool_exp THEN Stmt SEMICOLON Stmt_prime Cond_tail

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 41

    Bool_exp          go to state 42
    Relation_and_exp  go to state 43
    Relation_exp      go to state 44
    Var               go to state 45
    Expr              go to state 46
    Mult_expr         go to state 47
    Term              go to state 48


state 24

   12 Stmt: WHILE . Bool_exp BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 41

    Bool_exp          go to state 49
    Relation_and_exp  go to state 43
    Relation_exp      go to state 44
    Var               go to state 45
    Expr              go to state 46
    Mult_expr         go to state 47
    Term              go to state 48


state 25

   13 Stmt: BEGINLOOP . Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    Stmt  go to state 50
    Var   go to state 33


state 26

   16 Stmt: BREAK .

    $default  reduce using rule 16 (Stmt)


state 27

   17 Stmt: CONTINUE .

    $default  reduce using rule 17 (Stmt)


state 28

   18 Stmt: EXIT .

    $default  reduce using rule 18 (Stmt)


state 29

   14 Stmt: READ . Var SEMICOLON Var_prime

    IDENT  shift, and go to state 31

    Var  go to state 51


state 30

   15 Stmt: WRITE . Var SEMICOLON Var_prime

    IDENT  shift, and go to state 31

    Var  go to state 52


state 31

   33 Var: IDENT .
   34    | IDENT . L_PAREN Expr R_PAREN

    L_PAREN  shift, and go to state 53

    $default  reduce using rule 33 (Var)


state 32

    2 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt . SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 54


state 33

    9 Stmt: Var . ASSIGN Expr
   10     | Var . ASSIGN Bool_exp QUESTION Expr COLON Expr

    ASSIGN  shift, and go to state 55


state 34

    3 Dec_prime: Dec SEMICOLON Dec_prime .

    $default  reduce using rule 3 (Dec_prime)


state 35

    5 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER . R_BRACKET OF INTEGER

    R_BRACKET  shift, and go to state 56


state 36

   25 Relation_exp: NOT . Expr Comp Expr
   26             | NOT . FALSE
   27             | NOT . TRUE
   28             | NOT . L_PAREN Bool_exp R_PAREN

    TRUE     shift, and go to state 57
    FALSE    shift, and go to state 58
    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 59

    Var        go to state 45
    Expr       go to state 60
    Mult_expr  go to state 47
    Term       go to state 48


state 37

   31 Relation_exp: TRUE .

    $default  reduce using rule 31 (Relation_exp)


state 38

   30 Relation_exp: FALSE .

    $default  reduce using rule 30 (Relation_exp)


state 39

   62 Term: SUB . Var
   63     | SUB . NUMBER
   64     | SUB . L_PAREN Expr R_PAREN

    NUMBER   shift, and go to state 61
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 62

    Var  go to state 63


state 40

   60 Term: NUMBER .

    $default  reduce using rule 60 (Term)


state 41

   32 Relation_exp: L_PAREN . Bool_exp R_PAREN
   61 Term: L_PAREN . Expr R_PAREN

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 41

    Bool_exp          go to state 64
    Relation_and_exp  go to state 43
    Relation_exp      go to state 44
    Var               go to state 45
    Expr              go to state 65
    Mult_expr         go to state 47
    Term              go to state 48


state 42

   11 Stmt: IF Bool_exp . THEN Stmt SEMICOLON Stmt_prime Cond_tail

    THEN  shift, and go to state 66


state 43

   21 Bool_exp: Relation_and_exp .
   22         | Relation_and_exp . OR Relation_and_exp

    OR  shift, and go to state 67

    $default  reduce using rule 21 (Bool_exp)


state 44

   23 Relation_and_exp: Relation_exp .
   24                 | Relation_exp . AND Relation_exp

    AND  shift, and go to state 68

    $default  reduce using rule 23 (Relation_and_exp)


state 45

   59 Term: Var .

    $default  reduce using rule 59 (Term)


state 46

   29 Relation_exp: Expr . Comp Expr

    EQ   shift, and go to state 69
    NEQ  shift, and go to state 70
    LT   shift, and go to state 71
    GT   shift, and go to state 72
    LTE  shift, and go to state 73
    GTE  shift, and go to state 74

    Comp  go to state 75


state 47

   50 Expr: Mult_expr . Expr_seq

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 53 (Expr_seq)

    Expr_seq  go to state 78


state 48

   54 Mult_expr: Term . Mult_expr_seq

    MULT  shift, and go to state 79
    DIV   shift, and go to state 80
    MOD   shift, and go to state 81

    $default  reduce using rule 58 (Mult_expr_seq)

    Mult_expr_seq  go to state 82


state 49

   12 Stmt: WHILE Bool_exp . BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP

    BEGINLOOP  shift, and go to state 83


state 50

   13 Stmt: BEGINLOOP Stmt . SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp

    SEMICOLON  shift, and go to state 84


state 51

   14 Stmt: READ Var . SEMICOLON Var_prime

    SEMICOLON  shift, and go to state 85


state 52

   15 Stmt: WRITE Var . SEMICOLON Var_prime

    SEMICOLON  shift, and go to state 86


state 53

   34 Var: IDENT L_PAREN . Expr R_PAREN

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var        go to state 45
    Expr       go to state 88
    Mult_expr  go to state 47
    Term       go to state 48


state 54

    2 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON . Stmt_prime

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    $default  reduce using rule 20 (Stmt_prime)

    Stmt        go to state 89
    Stmt_prime  go to state 90
    Var         go to state 33


state 55

    9 Stmt: Var ASSIGN . Expr
   10     | Var ASSIGN . Bool_exp QUESTION Expr COLON Expr

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 41

    Bool_exp          go to state 91
    Relation_and_exp  go to state 43
    Relation_exp      go to state 44
    Var               go to state 45
    Expr              go to state 92
    Mult_expr         go to state 47
    Term              go to state 48


state 56

    5 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET . OF INTEGER

    OF  shift, and go to state 93


state 57

   27 Relation_exp: NOT TRUE .

    $default  reduce using rule 27 (Relation_exp)


state 58

   26 Relation_exp: NOT FALSE .

    $default  reduce using rule 26 (Relation_exp)


state 59

   28 Relation_exp: NOT L_PAREN . Bool_exp R_PAREN
   61 Term: L_PAREN . Expr R_PAREN

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 41

    Bool_exp          go to state 94
    Relation_and_exp  go to state 43
    Relation_exp      go to state 44
    Var               go to state 45
    Expr              go to state 65
    Mult_expr         go to state 47
    Term              go to state 48


state 60

   25 Relation_exp: NOT Expr . Comp Expr

    EQ   shift, and go to state 69
    NEQ  shift, and go to state 70
    LT   shift, and go to state 71
    GT   shift, and go to state 72
    LTE  shift, and go to state 73
    GTE  shift, and go to state 74

    Comp  go to state 95


state 61

   63 Term: SUB NUMBER .

    $default  reduce using rule 63 (Term)


state 62

   64 Term: SUB L_PAREN . Expr R_PAREN

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var        go to state 45
    Expr       go to state 96
    Mult_expr  go to state 47
    Term       go to state 48


state 63

   62 Term: SUB Var .

    $default  reduce using rule 62 (Term)


state 64

   32 Relation_exp: L_PAREN Bool_exp . R_PAREN

    R_PAREN  shift, and go to state 97


state 65

   29 Relation_exp: Expr . Comp Expr
   61 Term: L_PAREN Expr . R_PAREN

    EQ       shift, and go to state 69
    NEQ      shift, and go to state 70
    LT       shift, and go to state 71
    GT       shift, and go to state 72
    LTE      shift, and go to state 73
    GTE      shift, and go to state 74
    R_PAREN  shift, and go to state 98

    Comp  go to state 75


state 66

   11 Stmt: IF Bool_exp THEN . Stmt SEMICOLON Stmt_prime Cond_tail

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    Stmt  go to state 99
    Var   go to state 33


state 67

   22 Bool_exp: Relation_and_exp OR . Relation_and_exp

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 41

    Relation_and_exp  go to state 100
    Relation_exp      go to state 44
    Var               go to state 45
    Expr              go to state 46
    Mult_expr         go to state 47
    Term              go to state 48


state 68

   24 Relation_and_exp: Relation_exp AND . Relation_exp

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 41

    Relation_exp  go to state 101
    Var           go to state 45
    Expr          go to state 46
    Mult_expr     go to state 47
    Term          go to state 48


state 69

   44 Comp: EQ .

    $default  reduce using rule 44 (Comp)


state 70

   45 Comp: NEQ .

    $default  reduce using rule 45 (Comp)


state 71

   46 Comp: LT .

    $default  reduce using rule 46 (Comp)


state 72

   47 Comp: GT .

    $default  reduce using rule 47 (Comp)


state 73

   48 Comp: LTE .

    $default  reduce using rule 48 (Comp)


state 74

   49 Comp: GTE .

    $default  reduce using rule 49 (Comp)


state 75

   29 Relation_exp: Expr Comp . Expr

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var        go to state 45
    Expr       go to state 102
    Mult_expr  go to state 47
    Term       go to state 48


state 76

   51 Expr_seq: ADD . Mult_expr Expr_seq

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var        go to state 45
    Mult_expr  go to state 103
    Term       go to state 48


state 77

   52 Expr_seq: SUB . Mult_expr Expr_seq

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var        go to state 45
    Mult_expr  go to state 104
    Term       go to state 48


state 78

   50 Expr: Mult_expr Expr_seq .

    $default  reduce using rule 50 (Expr)


state 79

   55 Mult_expr_seq: MULT . Term Mult_expr_seq

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var   go to state 45
    Term  go to state 105


state 80

   56 Mult_expr_seq: DIV . Term Mult_expr_seq

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var   go to state 45
    Term  go to state 106


state 81

   57 Mult_expr_seq: MOD . Term Mult_expr_seq

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var   go to state 45
    Term  go to state 107


state 82

   54 Mult_expr: Term Mult_expr_seq .

    $default  reduce using rule 54 (Mult_expr)


state 83

   12 Stmt: WHILE Bool_exp BEGINLOOP . Stmt SEMICOLON Stmt_prime ENDLOOP

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    Stmt  go to state 108
    Var   go to state 33


state 84

   13 Stmt: BEGINLOOP Stmt SEMICOLON . Stmt_prime ENDLOOP WHILE Bool_exp

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    $default  reduce using rule 20 (Stmt_prime)

    Stmt        go to state 89
    Stmt_prime  go to state 109
    Var         go to state 33


state 85

   14 Stmt: READ Var SEMICOLON . Var_prime

    IDENT  shift, and go to state 31

    $default  reduce using rule 36 (Var_prime)

    Var        go to state 110
    Var_prime  go to state 111


state 86

   15 Stmt: WRITE Var SEMICOLON . Var_prime

    IDENT  shift, and go to state 31

    $default  reduce using rule 36 (Var_prime)

    Var        go to state 110
    Var_prime  go to state 112


state 87

   61 Term: L_PAREN . Expr R_PAREN

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var        go to state 45
    Expr       go to state 113
    Mult_expr  go to state 47
    Term       go to state 48


state 88

   34 Var: IDENT L_PAREN Expr . R_PAREN

    R_PAREN  shift, and go to state 114


state 89

   19 Stmt_prime: Stmt . SEMICOLON Stmt_prime

    SEMICOLON  shift, and go to state 115


state 90

    2 Block: Dec SEMICOLON Dec_prime BEGIN_PROGRAM Stmt SEMICOLON Stmt_prime .

    $default  reduce using rule 2 (Block)


state 91

   10 Stmt: Var ASSIGN Bool_exp . QUESTION Expr COLON Expr

    QUESTION  shift, and go to state 116


state 92

    9 Stmt: Var ASSIGN Expr .
   29 Relation_exp: Expr . Comp Expr

    EQ   shift, and go to state 69
    NEQ  shift, and go to state 70
    LT   shift, and go to state 71
    GT   shift, and go to state 72
    LTE  shift, and go to state 73
    GTE  shift, and go to state 74

    $default  reduce using rule 9 (Stmt)

    Comp  go to state 75


state 93

    5 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 117


state 94

   28 Relation_exp: NOT L_PAREN Bool_exp . R_PAREN

    R_PAREN  shift, and go to state 118


state 95

   25 Relation_exp: NOT Expr Comp . Expr

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var        go to state 45
    Expr       go to state 119
    Mult_expr  go to state 47
    Term       go to state 48


state 96

   64 Term: SUB L_PAREN Expr . R_PAREN

    R_PAREN  shift, and go to state 120


state 97

   32 Relation_exp: L_PAREN Bool_exp R_PAREN .

    $default  reduce using rule 32 (Relation_exp)


state 98

   61 Term: L_PAREN Expr R_PAREN .

    $default  reduce using rule 61 (Term)


state 99

   11 Stmt: IF Bool_exp THEN Stmt . SEMICOLON Stmt_prime Cond_tail

    SEMICOLON  shift, and go to state 121


state 100

   22 Bool_exp: Relation_and_exp OR Relation_and_exp .

    $default  reduce using rule 22 (Bool_exp)


state 101

   24 Relation_and_exp: Relation_exp AND Relation_exp .

    $default  reduce using rule 24 (Relation_and_exp)


state 102

   29 Relation_exp: Expr Comp Expr .

    $default  reduce using rule 29 (Relation_exp)


state 103

   51 Expr_seq: ADD Mult_expr . Expr_seq

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 53 (Expr_seq)

    Expr_seq  go to state 122


state 104

   52 Expr_seq: SUB Mult_expr . Expr_seq

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 53 (Expr_seq)

    Expr_seq  go to state 123


state 105

   55 Mult_expr_seq: MULT Term . Mult_expr_seq

    MULT  shift, and go to state 79
    DIV   shift, and go to state 80
    MOD   shift, and go to state 81

    $default  reduce using rule 58 (Mult_expr_seq)

    Mult_expr_seq  go to state 124


state 106

   56 Mult_expr_seq: DIV Term . Mult_expr_seq

    MULT  shift, and go to state 79
    DIV   shift, and go to state 80
    MOD   shift, and go to state 81

    $default  reduce using rule 58 (Mult_expr_seq)

    Mult_expr_seq  go to state 125


state 107

   57 Mult_expr_seq: MOD Term . Mult_expr_seq

    MULT  shift, and go to state 79
    DIV   shift, and go to state 80
    MOD   shift, and go to state 81

    $default  reduce using rule 58 (Mult_expr_seq)

    Mult_expr_seq  go to state 126


state 108

   12 Stmt: WHILE Bool_exp BEGINLOOP Stmt . SEMICOLON Stmt_prime ENDLOOP

    SEMICOLON  shift, and go to state 127


state 109

   13 Stmt: BEGINLOOP Stmt SEMICOLON Stmt_prime . ENDLOOP WHILE Bool_exp

    ENDLOOP  shift, and go to state 128


state 110

   35 Var_prime: Var . SEMICOLON Var_prime

    SEMICOLON  shift, and go to state 129


state 111

   14 Stmt: READ Var SEMICOLON Var_prime .

    $default  reduce using rule 14 (Stmt)


state 112

   15 Stmt: WRITE Var SEMICOLON Var_prime .

    $default  reduce using rule 15 (Stmt)


state 113

   61 Term: L_PAREN Expr . R_PAREN

    R_PAREN  shift, and go to state 98


state 114

   34 Var: IDENT L_PAREN Expr R_PAREN .

    $default  reduce using rule 34 (Var)


state 115

   19 Stmt_prime: Stmt SEMICOLON . Stmt_prime

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    $default  reduce using rule 20 (Stmt_prime)

    Stmt        go to state 89
    Stmt_prime  go to state 130
    Var         go to state 33


state 116

   10 Stmt: Var ASSIGN Bool_exp QUESTION . Expr COLON Expr

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var        go to state 45
    Expr       go to state 131
    Mult_expr  go to state 47
    Term       go to state 48


state 117

    5 Dec: IDENT Ident_seq COLON ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER .

    $default  reduce using rule 5 (Dec)


state 118

   28 Relation_exp: NOT L_PAREN Bool_exp R_PAREN .

    $default  reduce using rule 28 (Relation_exp)


state 119

   25 Relation_exp: NOT Expr Comp Expr .

    $default  reduce using rule 25 (Relation_exp)


state 120

   64 Term: SUB L_PAREN Expr R_PAREN .

    $default  reduce using rule 64 (Term)


state 121

   11 Stmt: IF Bool_exp THEN Stmt SEMICOLON . Stmt_prime Cond_tail

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    $default  reduce using rule 20 (Stmt_prime)

    Stmt        go to state 89
    Stmt_prime  go to state 132
    Var         go to state 33


state 122

   51 Expr_seq: ADD Mult_expr Expr_seq .

    $default  reduce using rule 51 (Expr_seq)


state 123

   52 Expr_seq: SUB Mult_expr Expr_seq .

    $default  reduce using rule 52 (Expr_seq)


state 124

   55 Mult_expr_seq: MULT Term Mult_expr_seq .

    $default  reduce using rule 55 (Mult_expr_seq)


state 125

   56 Mult_expr_seq: DIV Term Mult_expr_seq .

    $default  reduce using rule 56 (Mult_expr_seq)


state 126

   57 Mult_expr_seq: MOD Term Mult_expr_seq .

    $default  reduce using rule 57 (Mult_expr_seq)


state 127

   12 Stmt: WHILE Bool_exp BEGINLOOP Stmt SEMICOLON . Stmt_prime ENDLOOP

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    $default  reduce using rule 20 (Stmt_prime)

    Stmt        go to state 89
    Stmt_prime  go to state 133
    Var         go to state 33


state 128

   13 Stmt: BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP . WHILE Bool_exp

    WHILE  shift, and go to state 134


state 129

   35 Var_prime: Var SEMICOLON . Var_prime

    IDENT  shift, and go to state 31

    $default  reduce using rule 36 (Var_prime)

    Var        go to state 110
    Var_prime  go to state 135


state 130

   19 Stmt_prime: Stmt SEMICOLON Stmt_prime .

    $default  reduce using rule 19 (Stmt_prime)


state 131

   10 Stmt: Var ASSIGN Bool_exp QUESTION Expr . COLON Expr

    COLON  shift, and go to state 136


state 132

   11 Stmt: IF Bool_exp THEN Stmt SEMICOLON Stmt_prime . Cond_tail

    ENDIF   shift, and go to state 137
    ELSE    shift, and go to state 138
    ELSEIF  shift, and go to state 139

    $default  reduce using rule 43 (Else_if_seq)

    Cond_tail    go to state 140
    Else_if_seq  go to state 141


state 133

   12 Stmt: WHILE Bool_exp BEGINLOOP Stmt SEMICOLON Stmt_prime . ENDLOOP

    ENDLOOP  shift, and go to state 142


state 134

   13 Stmt: BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP WHILE . Bool_exp

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 41

    Bool_exp          go to state 143
    Relation_and_exp  go to state 43
    Relation_exp      go to state 44
    Var               go to state 45
    Expr              go to state 46
    Mult_expr         go to state 47
    Term              go to state 48


state 135

   35 Var_prime: Var SEMICOLON Var_prime .

    $default  reduce using rule 35 (Var_prime)


state 136

   10 Stmt: Var ASSIGN Bool_exp QUESTION Expr COLON . Expr

    SUB      shift, and go to state 39
    NUMBER   shift, and go to state 40
    IDENT    shift, and go to state 31
    L_PAREN  shift, and go to state 87

    Var        go to state 45
    Expr       go to state 144
    Mult_expr  go to state 47
    Term       go to state 48


state 137

   38 Cond_tail: ENDIF .

    $default  reduce using rule 38 (Cond_tail)


state 138

   39 Cond_tail: ELSE . Stmt SEMICOLON Stmt_prime ENDIF

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    Stmt  go to state 145
    Var   go to state 33


state 139

   40 Cond_tail: ELSEIF . Stmt SEMICOLON Stmt_prime Else_if_seq ENDIF
   41          | ELSEIF . Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF
   42 Else_if_seq: ELSEIF . Stmt SEMICOLON Stmt_prime Else_if_seq

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    Stmt  go to state 146
    Var   go to state 33


state 140

   11 Stmt: IF Bool_exp THEN Stmt SEMICOLON Stmt_prime Cond_tail .

    $default  reduce using rule 11 (Stmt)


state 141

   37 Cond_tail: Else_if_seq .

    $default  reduce using rule 37 (Cond_tail)


state 142

   12 Stmt: WHILE Bool_exp BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP .

    $default  reduce using rule 12 (Stmt)


state 143

   13 Stmt: BEGINLOOP Stmt SEMICOLON Stmt_prime ENDLOOP WHILE Bool_exp .

    $default  reduce using rule 13 (Stmt)


state 144

   10 Stmt: Var ASSIGN Bool_exp QUESTION Expr COLON Expr .

    $default  reduce using rule 10 (Stmt)


state 145

   39 Cond_tail: ELSE Stmt . SEMICOLON Stmt_prime ENDIF

    SEMICOLON  shift, and go to state 147


state 146

   40 Cond_tail: ELSEIF Stmt . SEMICOLON Stmt_prime Else_if_seq ENDIF
   41          | ELSEIF Stmt . SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF
   42 Else_if_seq: ELSEIF Stmt . SEMICOLON Stmt_prime Else_if_seq

    SEMICOLON  shift, and go to state 148


state 147

   39 Cond_tail: ELSE Stmt SEMICOLON . Stmt_prime ENDIF

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    $default  reduce using rule 20 (Stmt_prime)

    Stmt        go to state 89
    Stmt_prime  go to state 149
    Var         go to state 33


state 148

   40 Cond_tail: ELSEIF Stmt SEMICOLON . Stmt_prime Else_if_seq ENDIF
   41          | ELSEIF Stmt SEMICOLON . Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF
   42 Else_if_seq: ELSEIF Stmt SEMICOLON . Stmt_prime Else_if_seq

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    $default  reduce using rule 20 (Stmt_prime)

    Stmt        go to state 89
    Stmt_prime  go to state 150
    Var         go to state 33


state 149

   39 Cond_tail: ELSE Stmt SEMICOLON Stmt_prime . ENDIF

    ENDIF  shift, and go to state 151


state 150

   40 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime . Else_if_seq ENDIF
   41          | ELSEIF Stmt SEMICOLON Stmt_prime . Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF
   42 Else_if_seq: ELSEIF Stmt SEMICOLON Stmt_prime . Else_if_seq

    ELSEIF  shift, and go to state 152

    $default  reduce using rule 43 (Else_if_seq)

    Else_if_seq  go to state 153


state 151

   39 Cond_tail: ELSE Stmt SEMICOLON Stmt_prime ENDIF .

    $default  reduce using rule 39 (Cond_tail)


state 152

   42 Else_if_seq: ELSEIF . Stmt SEMICOLON Stmt_prime Else_if_seq

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    Stmt  go to state 154
    Var   go to state 33


state 153

   40 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq . ENDIF
   41          | ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq . ELSE Stmt SEMICOLON Stmt_prime ENDIF
   42 Else_if_seq: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq .

    ENDIF  shift, and go to state 155
    ELSE   shift, and go to state 156

    $default  reduce using rule 42 (Else_if_seq)


state 154

   42 Else_if_seq: ELSEIF Stmt . SEMICOLON Stmt_prime Else_if_seq

    SEMICOLON  shift, and go to state 157


state 155

   40 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ENDIF .

    $default  reduce using rule 40 (Cond_tail)


state 156

   41 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE . Stmt SEMICOLON Stmt_prime ENDIF

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    Stmt  go to state 158
    Var   go to state 33


state 157

   42 Else_if_seq: ELSEIF Stmt SEMICOLON . Stmt_prime Else_if_seq

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    $default  reduce using rule 20 (Stmt_prime)

    Stmt        go to state 89
    Stmt_prime  go to state 159
    Var         go to state 33


state 158

   41 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt . SEMICOLON Stmt_prime ENDIF

    SEMICOLON  shift, and go to state 160


state 159

   42 Else_if_seq: ELSEIF Stmt SEMICOLON Stmt_prime . Else_if_seq

    ELSEIF  shift, and go to state 152

    $default  reduce using rule 43 (Else_if_seq)

    Else_if_seq  go to state 161


state 160

   41 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON . Stmt_prime ENDIF

    IF         shift, and go to state 23
    WHILE      shift, and go to state 24
    BEGINLOOP  shift, and go to state 25
    BREAK      shift, and go to state 26
    CONTINUE   shift, and go to state 27
    EXIT       shift, and go to state 28
    READ       shift, and go to state 29
    WRITE      shift, and go to state 30
    IDENT      shift, and go to state 31

    $default  reduce using rule 20 (Stmt_prime)

    Stmt        go to state 89
    Stmt_prime  go to state 162
    Var         go to state 33


state 161

   42 Else_if_seq: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq .

    $default  reduce using rule 42 (Else_if_seq)


state 162

   41 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime . ENDIF

    ENDIF  shift, and go to state 163


state 163

   41 Cond_tail: ELSEIF Stmt SEMICOLON Stmt_prime Else_if_seq ELSE Stmt SEMICOLON Stmt_prime ENDIF .

    $default  reduce using rule 41 (Cond_tail)
